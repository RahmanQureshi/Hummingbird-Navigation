classdef Face < robotics.ros.Message
    %Face MATLAB implementation of opencv_apps/Face
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'opencv_apps/Face' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'a1a50e747b0ca7822ce8611c3ffa7a02' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        OpencvAppsRectClass = robotics.ros.msg.internal.MessageFactory.getClassForType('opencv_apps/Rect') % Dispatch to MATLAB class for message type opencv_apps/Rect
    end
    
    properties (Dependent)
        Face_
        Label
        Confidence
        Eyes
    end
    
    properties (Access = protected)
        Cache = struct('Face_', [], 'Eyes', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Confidence', 'Eyes', 'Face_', 'Label'} % List of non-constant message properties
        ROSPropertyList = {'confidence', 'eyes', 'face', 'label'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Face(msg)
            %Face Construct the message object Face
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function face_ = get.Face_(obj)
            %get.Face_ Get the value for property Face_
            if isempty(obj.Cache.Face_)
                obj.Cache.Face_ = feval(obj.OpencvAppsRectClass, obj.JavaMessage.getFace);
            end
            face_ = obj.Cache.Face_;
        end
        
        function set.Face_(obj, face_)
            %set.Face_ Set the value for property Face_
            validateattributes(face_, {obj.OpencvAppsRectClass}, {'nonempty', 'scalar'}, 'Face', 'Face_');
            
            obj.JavaMessage.setFace(face_.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Face_)
                obj.Cache.Face_.setJavaObject(face_.getJavaObject);
            end
        end
        
        function label = get.Label(obj)
            %get.Label Get the value for property Label
            label = char(obj.JavaMessage.getLabel);
        end
        
        function set.Label(obj, label)
            %set.Label Set the value for property Label
            validateattributes(label, {'char'}, {}, 'Face', 'Label');
            
            obj.JavaMessage.setLabel(label);
        end
        
        function confidence = get.Confidence(obj)
            %get.Confidence Get the value for property Confidence
            confidence = double(obj.JavaMessage.getConfidence);
        end
        
        function set.Confidence(obj, confidence)
            %set.Confidence Set the value for property Confidence
            validateattributes(confidence, {'numeric'}, {'nonempty', 'scalar'}, 'Face', 'Confidence');
            
            obj.JavaMessage.setConfidence(confidence);
        end
        
        function eyes = get.Eyes(obj)
            %get.Eyes Get the value for property Eyes
            if isempty(obj.Cache.Eyes)
                javaArray = obj.JavaMessage.getEyes;
                array = obj.readJavaArray(javaArray, obj.OpencvAppsRectClass);
                obj.Cache.Eyes = feval(obj.OpencvAppsRectClass, array);
            end
            eyes = obj.Cache.Eyes;
        end
        
        function set.Eyes(obj, eyes)
            %set.Eyes Set the value for property Eyes
            if ~isvector(eyes) && isempty(eyes)
                % Allow empty [] input
                eyes = feval([obj.OpencvAppsRectClass '.empty'], 0, 1);
            end
            
            validateattributes(eyes, {obj.OpencvAppsRectClass}, {'vector'}, 'Face', 'Eyes');
            
            javaArray = obj.JavaMessage.getEyes;
            array = obj.writeJavaArray(eyes, javaArray, obj.OpencvAppsRectClass);
            obj.JavaMessage.setEyes(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Eyes)
                obj.Cache.Eyes = [];
                obj.Cache.Eyes = obj.Eyes;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Face_ = [];
            obj.Cache.Eyes = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Label = obj.Label;
            cpObj.Confidence = obj.Confidence;
            
            % Recursively copy compound properties
            cpObj.Face_ = copy(obj.Face_);
            cpObj.Eyes = copy(obj.Eyes);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Label = strObj.Label;
            obj.Confidence = strObj.Confidence;
            obj.Face_ = feval([obj.OpencvAppsRectClass '.loadobj'], strObj.Face_);
            EyesCell = arrayfun(@(x) feval([obj.OpencvAppsRectClass '.loadobj'], x), strObj.Eyes, 'UniformOutput', false);
            obj.Eyes = vertcat(EyesCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Label = obj.Label;
            strObj.Confidence = obj.Confidence;
            strObj.Face_ = saveobj(obj.Face_);
            strObj.Eyes = arrayfun(@(x) saveobj(x), obj.Eyes);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.opencv_apps.Face.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.opencv_apps.Face;
            obj.reload(strObj);
        end
    end
end
