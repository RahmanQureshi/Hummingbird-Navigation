classdef AprilTagFamily < robotics.ros.Message
    %AprilTagFamily MATLAB implementation of apriltags2_ros/AprilTagFamily
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'apriltags2_ros/AprilTagFamily' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '6bd67e6af572c3f78b36ab74b058ca18' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Ncodes
        BlackBorder
        D
        H
        Name
        Codes
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BlackBorder', 'Codes', 'D', 'H', 'Name', 'Ncodes'} % List of non-constant message properties
        ROSPropertyList = {'black_border', 'codes', 'd', 'h', 'name', 'ncodes'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = AprilTagFamily(msg)
            %AprilTagFamily Construct the message object AprilTagFamily
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function ncodes = get.Ncodes(obj)
            %get.Ncodes Get the value for property Ncodes
            ncodes = typecast(int32(obj.JavaMessage.getNcodes), 'uint32');
        end
        
        function set.Ncodes(obj, ncodes)
            %set.Ncodes Set the value for property Ncodes
            validateattributes(ncodes, {'numeric'}, {'nonempty', 'scalar'}, 'AprilTagFamily', 'Ncodes');
            
            obj.JavaMessage.setNcodes(ncodes);
        end
        
        function blackborder = get.BlackBorder(obj)
            %get.BlackBorder Get the value for property BlackBorder
            blackborder = typecast(int32(obj.JavaMessage.getBlackBorder), 'uint32');
        end
        
        function set.BlackBorder(obj, blackborder)
            %set.BlackBorder Set the value for property BlackBorder
            validateattributes(blackborder, {'numeric'}, {'nonempty', 'scalar'}, 'AprilTagFamily', 'BlackBorder');
            
            obj.JavaMessage.setBlackBorder(blackborder);
        end
        
        function d = get.D(obj)
            %get.D Get the value for property D
            d = typecast(int32(obj.JavaMessage.getD), 'uint32');
        end
        
        function set.D(obj, d)
            %set.D Set the value for property D
            validateattributes(d, {'numeric'}, {'nonempty', 'scalar'}, 'AprilTagFamily', 'D');
            
            obj.JavaMessage.setD(d);
        end
        
        function h = get.H(obj)
            %get.H Get the value for property H
            h = typecast(int32(obj.JavaMessage.getH), 'uint32');
        end
        
        function set.H(obj, h)
            %set.H Set the value for property H
            validateattributes(h, {'numeric'}, {'nonempty', 'scalar'}, 'AprilTagFamily', 'H');
            
            obj.JavaMessage.setH(h);
        end
        
        function name = get.Name(obj)
            %get.Name Get the value for property Name
            name = char(obj.JavaMessage.getName);
        end
        
        function set.Name(obj, name)
            %set.Name Set the value for property Name
            validateattributes(name, {'char'}, {}, 'AprilTagFamily', 'Name');
            
            obj.JavaMessage.setName(name);
        end
        
        function codes = get.Codes(obj)
            %get.Codes Get the value for property Codes
            javaArray = obj.JavaMessage.getCodes;
            array = obj.readJavaArray(javaArray, 'uint64');
            codes = uint64(array);
        end
        
        function set.Codes(obj, codes)
            %set.Codes Set the value for property Codes
            if ~isvector(codes) && isempty(codes)
                % Allow empty [] input
                codes = uint64.empty(0,1);
            end
            
            validateattributes(codes, {'numeric'}, {'vector'}, 'AprilTagFamily', 'Codes');
            
            javaArray = obj.JavaMessage.getCodes;
            array = obj.writeJavaArray(codes, javaArray, 'uint64');
            obj.JavaMessage.setCodes(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Ncodes = obj.Ncodes;
            cpObj.BlackBorder = obj.BlackBorder;
            cpObj.D = obj.D;
            cpObj.H = obj.H;
            cpObj.Name = obj.Name;
            cpObj.Codes = obj.Codes;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Ncodes = strObj.Ncodes;
            obj.BlackBorder = strObj.BlackBorder;
            obj.D = strObj.D;
            obj.H = strObj.H;
            obj.Name = strObj.Name;
            obj.Codes = strObj.Codes;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Ncodes = obj.Ncodes;
            strObj.BlackBorder = obj.BlackBorder;
            strObj.D = obj.D;
            strObj.H = obj.H;
            strObj.Name = obj.Name;
            strObj.Codes = obj.Codes;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.apriltags2_ros.AprilTagFamily.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.apriltags2_ros.AprilTagFamily;
            obj.reload(strObj);
        end
    end
end
