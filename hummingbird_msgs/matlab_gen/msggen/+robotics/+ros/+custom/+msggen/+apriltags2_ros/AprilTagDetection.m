classdef AprilTagDetection < robotics.ros.Message
    %AprilTagDetection MATLAB implementation of apriltags2_ros/AprilTagDetection
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'apriltags2_ros/AprilTagDetection' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'aa38b659c5b7c63ad570aaa0172b15cb' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        Apriltags2RosAprilTagFamilyClass = robotics.ros.msg.internal.MessageFactory.getClassForType('apriltags2_ros/AprilTagFamily') % Dispatch to MATLAB class for message type apriltags2_ros/AprilTagFamily
        Apriltags2RosMatrixClass = robotics.ros.msg.internal.MessageFactory.getClassForType('apriltags2_ros/Matrix') % Dispatch to MATLAB class for message type apriltags2_ros/Matrix
        Apriltags2RosPoint2DClass = robotics.ros.msg.internal.MessageFactory.getClassForType('apriltags2_ros/Point2D') % Dispatch to MATLAB class for message type apriltags2_ros/Point2D
    end
    
    properties (Dependent)
        Family
        Id
        Hamming
        Goodness
        DecisionMargin
        H
        C
        P
    end
    
    properties (Access = protected)
        Cache = struct('Family', [], 'H', [], 'C', [], 'P', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'C', 'DecisionMargin', 'Family', 'Goodness', 'H', 'Hamming', 'Id', 'P'} % List of non-constant message properties
        ROSPropertyList = {'c', 'decision_margin', 'family', 'goodness', 'H', 'hamming', 'id', 'p'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = AprilTagDetection(msg)
            %AprilTagDetection Construct the message object AprilTagDetection
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function family = get.Family(obj)
            %get.Family Get the value for property Family
            if isempty(obj.Cache.Family)
                obj.Cache.Family = feval(obj.Apriltags2RosAprilTagFamilyClass, obj.JavaMessage.getFamily);
            end
            family = obj.Cache.Family;
        end
        
        function set.Family(obj, family)
            %set.Family Set the value for property Family
            validateattributes(family, {obj.Apriltags2RosAprilTagFamilyClass}, {'nonempty', 'scalar'}, 'AprilTagDetection', 'Family');
            
            obj.JavaMessage.setFamily(family.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Family)
                obj.Cache.Family.setJavaObject(family.getJavaObject);
            end
        end
        
        function id = get.Id(obj)
            %get.Id Get the value for property Id
            id = int8(obj.JavaMessage.getId);
        end
        
        function set.Id(obj, id)
            %set.Id Set the value for property Id
            validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'AprilTagDetection', 'Id');
            
            obj.JavaMessage.setId(id);
        end
        
        function hamming = get.Hamming(obj)
            %get.Hamming Get the value for property Hamming
            hamming = int8(obj.JavaMessage.getHamming);
        end
        
        function set.Hamming(obj, hamming)
            %set.Hamming Set the value for property Hamming
            validateattributes(hamming, {'numeric'}, {'nonempty', 'scalar'}, 'AprilTagDetection', 'Hamming');
            
            obj.JavaMessage.setHamming(hamming);
        end
        
        function goodness = get.Goodness(obj)
            %get.Goodness Get the value for property Goodness
            goodness = single(obj.JavaMessage.getGoodness);
        end
        
        function set.Goodness(obj, goodness)
            %set.Goodness Set the value for property Goodness
            validateattributes(goodness, {'numeric'}, {'nonempty', 'scalar'}, 'AprilTagDetection', 'Goodness');
            
            obj.JavaMessage.setGoodness(goodness);
        end
        
        function decisionmargin = get.DecisionMargin(obj)
            %get.DecisionMargin Get the value for property DecisionMargin
            decisionmargin = single(obj.JavaMessage.getDecisionMargin);
        end
        
        function set.DecisionMargin(obj, decisionmargin)
            %set.DecisionMargin Set the value for property DecisionMargin
            validateattributes(decisionmargin, {'numeric'}, {'nonempty', 'scalar'}, 'AprilTagDetection', 'DecisionMargin');
            
            obj.JavaMessage.setDecisionMargin(decisionmargin);
        end
        
        function h = get.H(obj)
            %get.H Get the value for property H
            if isempty(obj.Cache.H)
                obj.Cache.H = feval(obj.Apriltags2RosMatrixClass, obj.JavaMessage.getH);
            end
            h = obj.Cache.H;
        end
        
        function set.H(obj, h)
            %set.H Set the value for property H
            validateattributes(h, {obj.Apriltags2RosMatrixClass}, {'nonempty', 'scalar'}, 'AprilTagDetection', 'H');
            
            obj.JavaMessage.setH(h.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.H)
                obj.Cache.H.setJavaObject(h.getJavaObject);
            end
        end
        
        function c = get.C(obj)
            %get.C Get the value for property C
            if isempty(obj.Cache.C)
                obj.Cache.C = feval(obj.Apriltags2RosPoint2DClass, obj.JavaMessage.getC);
            end
            c = obj.Cache.C;
        end
        
        function set.C(obj, c)
            %set.C Set the value for property C
            validateattributes(c, {obj.Apriltags2RosPoint2DClass}, {'nonempty', 'scalar'}, 'AprilTagDetection', 'C');
            
            obj.JavaMessage.setC(c.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.C)
                obj.Cache.C.setJavaObject(c.getJavaObject);
            end
        end
        
        function p = get.P(obj)
            %get.P Get the value for property P
            if isempty(obj.Cache.P)
                javaArray = obj.JavaMessage.getP;
                array = obj.readJavaArray(javaArray, obj.Apriltags2RosPoint2DClass);
                obj.Cache.P = feval(obj.Apriltags2RosPoint2DClass, array);
            end
            p = obj.Cache.P;
        end
        
        function set.P(obj, p)
            %set.P Set the value for property P
            if ~isvector(p) && isempty(p)
                % Allow empty [] input
                p = feval([obj.Apriltags2RosPoint2DClass '.empty'], 0, 1);
            end
            
            validateattributes(p, {obj.Apriltags2RosPoint2DClass}, {'vector'}, 'AprilTagDetection', 'P');
            
            javaArray = obj.JavaMessage.getP;
            array = obj.writeJavaArray(p, javaArray, obj.Apriltags2RosPoint2DClass);
            obj.JavaMessage.setP(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.P)
                obj.Cache.P = [];
                obj.Cache.P = obj.P;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Family = [];
            obj.Cache.H = [];
            obj.Cache.C = [];
            obj.Cache.P = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Id = obj.Id;
            cpObj.Hamming = obj.Hamming;
            cpObj.Goodness = obj.Goodness;
            cpObj.DecisionMargin = obj.DecisionMargin;
            
            % Recursively copy compound properties
            cpObj.Family = copy(obj.Family);
            cpObj.H = copy(obj.H);
            cpObj.C = copy(obj.C);
            cpObj.P = copy(obj.P);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Id = strObj.Id;
            obj.Hamming = strObj.Hamming;
            obj.Goodness = strObj.Goodness;
            obj.DecisionMargin = strObj.DecisionMargin;
            obj.Family = feval([obj.Apriltags2RosAprilTagFamilyClass '.loadobj'], strObj.Family);
            obj.H = feval([obj.Apriltags2RosMatrixClass '.loadobj'], strObj.H);
            obj.C = feval([obj.Apriltags2RosPoint2DClass '.loadobj'], strObj.C);
            PCell = arrayfun(@(x) feval([obj.Apriltags2RosPoint2DClass '.loadobj'], x), strObj.P, 'UniformOutput', false);
            obj.P = vertcat(PCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Id = obj.Id;
            strObj.Hamming = obj.Hamming;
            strObj.Goodness = obj.Goodness;
            strObj.DecisionMargin = obj.DecisionMargin;
            strObj.Family = saveobj(obj.Family);
            strObj.H = saveobj(obj.H);
            strObj.C = saveobj(obj.C);
            strObj.P = arrayfun(@(x) saveobj(x), obj.P);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.apriltags2_ros.AprilTagDetection.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.apriltags2_ros.AprilTagDetection;
            obj.reload(strObj);
        end
    end
end
