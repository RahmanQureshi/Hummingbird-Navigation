classdef HomePosition < robotics.ros.Message
    %HomePosition MATLAB implementation of mavros_msgs/HomePosition
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/HomePosition' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'c1167922de8c97acdb0ec714c1dba774' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeographicMsgsGeoPointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geographic_msgs/GeoPoint') % Dispatch to MATLAB class for message type geographic_msgs/GeoPoint
        GeometryMsgsPointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
        GeometryMsgsQuaternionClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Quaternion') % Dispatch to MATLAB class for message type geometry_msgs/Quaternion
        GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Geo
        Position
        Orientation
        Approach
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Geo', [], 'Position', [], 'Orientation', [], 'Approach', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Approach', 'Geo', 'Header', 'Orientation', 'Position'} % List of non-constant message properties
        ROSPropertyList = {'approach', 'geo', 'header', 'orientation', 'position'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = HomePosition(msg)
            %HomePosition Construct the message object HomePosition
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'HomePosition', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function geo = get.Geo(obj)
            %get.Geo Get the value for property Geo
            if isempty(obj.Cache.Geo)
                obj.Cache.Geo = feval(obj.GeographicMsgsGeoPointClass, obj.JavaMessage.getGeo);
            end
            geo = obj.Cache.Geo;
        end
        
        function set.Geo(obj, geo)
            %set.Geo Set the value for property Geo
            validateattributes(geo, {obj.GeographicMsgsGeoPointClass}, {'nonempty', 'scalar'}, 'HomePosition', 'Geo');
            
            obj.JavaMessage.setGeo(geo.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Geo)
                obj.Cache.Geo.setJavaObject(geo.getJavaObject);
            end
        end
        
        function position = get.Position(obj)
            %get.Position Get the value for property Position
            if isempty(obj.Cache.Position)
                obj.Cache.Position = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getPosition);
            end
            position = obj.Cache.Position;
        end
        
        function set.Position(obj, position)
            %set.Position Set the value for property Position
            validateattributes(position, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'HomePosition', 'Position');
            
            obj.JavaMessage.setPosition(position.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Position)
                obj.Cache.Position.setJavaObject(position.getJavaObject);
            end
        end
        
        function orientation = get.Orientation(obj)
            %get.Orientation Get the value for property Orientation
            if isempty(obj.Cache.Orientation)
                obj.Cache.Orientation = feval(obj.GeometryMsgsQuaternionClass, obj.JavaMessage.getOrientation);
            end
            orientation = obj.Cache.Orientation;
        end
        
        function set.Orientation(obj, orientation)
            %set.Orientation Set the value for property Orientation
            validateattributes(orientation, {obj.GeometryMsgsQuaternionClass}, {'nonempty', 'scalar'}, 'HomePosition', 'Orientation');
            
            obj.JavaMessage.setOrientation(orientation.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Orientation)
                obj.Cache.Orientation.setJavaObject(orientation.getJavaObject);
            end
        end
        
        function approach = get.Approach(obj)
            %get.Approach Get the value for property Approach
            if isempty(obj.Cache.Approach)
                obj.Cache.Approach = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getApproach);
            end
            approach = obj.Cache.Approach;
        end
        
        function set.Approach(obj, approach)
            %set.Approach Set the value for property Approach
            validateattributes(approach, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'HomePosition', 'Approach');
            
            obj.JavaMessage.setApproach(approach.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Approach)
                obj.Cache.Approach.setJavaObject(approach.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Geo = [];
            obj.Cache.Position = [];
            obj.Cache.Orientation = [];
            obj.Cache.Approach = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Geo = copy(obj.Geo);
            cpObj.Position = copy(obj.Position);
            cpObj.Orientation = copy(obj.Orientation);
            cpObj.Approach = copy(obj.Approach);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Geo = feval([obj.GeographicMsgsGeoPointClass '.loadobj'], strObj.Geo);
            obj.Position = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.Position);
            obj.Orientation = feval([obj.GeometryMsgsQuaternionClass '.loadobj'], strObj.Orientation);
            obj.Approach = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.Approach);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Header = saveobj(obj.Header);
            strObj.Geo = saveobj(obj.Geo);
            strObj.Position = saveobj(obj.Position);
            strObj.Orientation = saveobj(obj.Orientation);
            strObj.Approach = saveobj(obj.Approach);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.HomePosition.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.HomePosition;
            obj.reload(strObj);
        end
    end
end
