classdef GlobalPositionTarget < robotics.ros.Message
    %GlobalPositionTarget MATLAB implementation of mavros_msgs/GlobalPositionTarget
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/GlobalPositionTarget' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '076ded0190b9e045f9c55264659ef102' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        FRAMEGLOBALINT = uint8(5)
        FRAMEGLOBALRELALT = uint8(6)
        FRAMEGLOBALTERRAINALT = uint8(11)
        IGNORELATITUDE = uint16(1)
        IGNORELONGITUDE = uint16(2)
        IGNOREALTITUDE = uint16(4)
        IGNOREVX = uint16(8)
        IGNOREVY = uint16(16)
        IGNOREVZ = uint16(32)
        IGNOREAFX = uint16(64)
        IGNOREAFY = uint16(128)
        IGNOREAFZ = uint16(256)
        FORCE = uint16(512)
        IGNOREYAW = uint16(1024)
        IGNOREYAWRATE = uint16(2048)
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        CoordinateFrame
        TypeMask
        Latitude
        Longitude
        Altitude
        Velocity
        AccelerationOrForce
        Yaw
        YawRate
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Velocity', [], 'AccelerationOrForce', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AccelerationOrForce', 'Altitude', 'CoordinateFrame', 'Header', 'Latitude', 'Longitude', 'TypeMask', 'Velocity', 'Yaw', 'YawRate'} % List of non-constant message properties
        ROSPropertyList = {'acceleration_or_force', 'altitude', 'coordinate_frame', 'header', 'latitude', 'longitude', 'type_mask', 'velocity', 'yaw', 'yaw_rate'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = GlobalPositionTarget(msg)
            %GlobalPositionTarget Construct the message object GlobalPositionTarget
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'GlobalPositionTarget', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function coordinateframe = get.CoordinateFrame(obj)
            %get.CoordinateFrame Get the value for property CoordinateFrame
            coordinateframe = typecast(int8(obj.JavaMessage.getCoordinateFrame), 'uint8');
        end
        
        function set.CoordinateFrame(obj, coordinateframe)
            %set.CoordinateFrame Set the value for property CoordinateFrame
            validateattributes(coordinateframe, {'numeric'}, {'nonempty', 'scalar'}, 'GlobalPositionTarget', 'CoordinateFrame');
            
            obj.JavaMessage.setCoordinateFrame(coordinateframe);
        end
        
        function typemask = get.TypeMask(obj)
            %get.TypeMask Get the value for property TypeMask
            typemask = typecast(int16(obj.JavaMessage.getTypeMask), 'uint16');
        end
        
        function set.TypeMask(obj, typemask)
            %set.TypeMask Set the value for property TypeMask
            validateattributes(typemask, {'numeric'}, {'nonempty', 'scalar'}, 'GlobalPositionTarget', 'TypeMask');
            
            obj.JavaMessage.setTypeMask(typemask);
        end
        
        function latitude = get.Latitude(obj)
            %get.Latitude Get the value for property Latitude
            latitude = double(obj.JavaMessage.getLatitude);
        end
        
        function set.Latitude(obj, latitude)
            %set.Latitude Set the value for property Latitude
            validateattributes(latitude, {'numeric'}, {'nonempty', 'scalar'}, 'GlobalPositionTarget', 'Latitude');
            
            obj.JavaMessage.setLatitude(latitude);
        end
        
        function longitude = get.Longitude(obj)
            %get.Longitude Get the value for property Longitude
            longitude = double(obj.JavaMessage.getLongitude);
        end
        
        function set.Longitude(obj, longitude)
            %set.Longitude Set the value for property Longitude
            validateattributes(longitude, {'numeric'}, {'nonempty', 'scalar'}, 'GlobalPositionTarget', 'Longitude');
            
            obj.JavaMessage.setLongitude(longitude);
        end
        
        function altitude = get.Altitude(obj)
            %get.Altitude Get the value for property Altitude
            altitude = single(obj.JavaMessage.getAltitude);
        end
        
        function set.Altitude(obj, altitude)
            %set.Altitude Set the value for property Altitude
            validateattributes(altitude, {'numeric'}, {'nonempty', 'scalar'}, 'GlobalPositionTarget', 'Altitude');
            
            obj.JavaMessage.setAltitude(altitude);
        end
        
        function velocity = get.Velocity(obj)
            %get.Velocity Get the value for property Velocity
            if isempty(obj.Cache.Velocity)
                obj.Cache.Velocity = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getVelocity);
            end
            velocity = obj.Cache.Velocity;
        end
        
        function set.Velocity(obj, velocity)
            %set.Velocity Set the value for property Velocity
            validateattributes(velocity, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'GlobalPositionTarget', 'Velocity');
            
            obj.JavaMessage.setVelocity(velocity.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Velocity)
                obj.Cache.Velocity.setJavaObject(velocity.getJavaObject);
            end
        end
        
        function accelerationorforce = get.AccelerationOrForce(obj)
            %get.AccelerationOrForce Get the value for property AccelerationOrForce
            if isempty(obj.Cache.AccelerationOrForce)
                obj.Cache.AccelerationOrForce = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getAccelerationOrForce);
            end
            accelerationorforce = obj.Cache.AccelerationOrForce;
        end
        
        function set.AccelerationOrForce(obj, accelerationorforce)
            %set.AccelerationOrForce Set the value for property AccelerationOrForce
            validateattributes(accelerationorforce, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'GlobalPositionTarget', 'AccelerationOrForce');
            
            obj.JavaMessage.setAccelerationOrForce(accelerationorforce.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.AccelerationOrForce)
                obj.Cache.AccelerationOrForce.setJavaObject(accelerationorforce.getJavaObject);
            end
        end
        
        function yaw = get.Yaw(obj)
            %get.Yaw Get the value for property Yaw
            yaw = single(obj.JavaMessage.getYaw);
        end
        
        function set.Yaw(obj, yaw)
            %set.Yaw Set the value for property Yaw
            validateattributes(yaw, {'numeric'}, {'nonempty', 'scalar'}, 'GlobalPositionTarget', 'Yaw');
            
            obj.JavaMessage.setYaw(yaw);
        end
        
        function yawrate = get.YawRate(obj)
            %get.YawRate Get the value for property YawRate
            yawrate = single(obj.JavaMessage.getYawRate);
        end
        
        function set.YawRate(obj, yawrate)
            %set.YawRate Set the value for property YawRate
            validateattributes(yawrate, {'numeric'}, {'nonempty', 'scalar'}, 'GlobalPositionTarget', 'YawRate');
            
            obj.JavaMessage.setYawRate(yawrate);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Velocity = [];
            obj.Cache.AccelerationOrForce = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.CoordinateFrame = obj.CoordinateFrame;
            cpObj.TypeMask = obj.TypeMask;
            cpObj.Latitude = obj.Latitude;
            cpObj.Longitude = obj.Longitude;
            cpObj.Altitude = obj.Altitude;
            cpObj.Yaw = obj.Yaw;
            cpObj.YawRate = obj.YawRate;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Velocity = copy(obj.Velocity);
            cpObj.AccelerationOrForce = copy(obj.AccelerationOrForce);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.CoordinateFrame = strObj.CoordinateFrame;
            obj.TypeMask = strObj.TypeMask;
            obj.Latitude = strObj.Latitude;
            obj.Longitude = strObj.Longitude;
            obj.Altitude = strObj.Altitude;
            obj.Yaw = strObj.Yaw;
            obj.YawRate = strObj.YawRate;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Velocity = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.Velocity);
            obj.AccelerationOrForce = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.AccelerationOrForce);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.CoordinateFrame = obj.CoordinateFrame;
            strObj.TypeMask = obj.TypeMask;
            strObj.Latitude = obj.Latitude;
            strObj.Longitude = obj.Longitude;
            strObj.Altitude = obj.Altitude;
            strObj.Yaw = obj.Yaw;
            strObj.YawRate = obj.YawRate;
            strObj.Header = saveobj(obj.Header);
            strObj.Velocity = saveobj(obj.Velocity);
            strObj.AccelerationOrForce = saveobj(obj.AccelerationOrForce);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.GlobalPositionTarget.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.GlobalPositionTarget;
            obj.reload(strObj);
        end
    end
end
