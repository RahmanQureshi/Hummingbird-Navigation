classdef AttitudeTarget < robotics.ros.Message
    %AttitudeTarget MATLAB implementation of mavros_msgs/AttitudeTarget
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/AttitudeTarget' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '456f3af666b22ccd0222ea053a86b548' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        IGNOREROLLRATE = uint8(1)
        IGNOREPITCHRATE = uint8(2)
        IGNOREYAWRATE = uint8(4)
        IGNORETHRUST = uint8(64)
        IGNOREATTITUDE = uint8(128)
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsQuaternionClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Quaternion') % Dispatch to MATLAB class for message type geometry_msgs/Quaternion
        GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        TypeMask
        Orientation
        BodyRate
        Thrust
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Orientation', [], 'BodyRate', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BodyRate', 'Header', 'Orientation', 'Thrust', 'TypeMask'} % List of non-constant message properties
        ROSPropertyList = {'body_rate', 'header', 'orientation', 'thrust', 'type_mask'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = AttitudeTarget(msg)
            %AttitudeTarget Construct the message object AttitudeTarget
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'AttitudeTarget', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function typemask = get.TypeMask(obj)
            %get.TypeMask Get the value for property TypeMask
            typemask = typecast(int8(obj.JavaMessage.getTypeMask), 'uint8');
        end
        
        function set.TypeMask(obj, typemask)
            %set.TypeMask Set the value for property TypeMask
            validateattributes(typemask, {'numeric'}, {'nonempty', 'scalar'}, 'AttitudeTarget', 'TypeMask');
            
            obj.JavaMessage.setTypeMask(typemask);
        end
        
        function orientation = get.Orientation(obj)
            %get.Orientation Get the value for property Orientation
            if isempty(obj.Cache.Orientation)
                obj.Cache.Orientation = feval(obj.GeometryMsgsQuaternionClass, obj.JavaMessage.getOrientation);
            end
            orientation = obj.Cache.Orientation;
        end
        
        function set.Orientation(obj, orientation)
            %set.Orientation Set the value for property Orientation
            validateattributes(orientation, {obj.GeometryMsgsQuaternionClass}, {'nonempty', 'scalar'}, 'AttitudeTarget', 'Orientation');
            
            obj.JavaMessage.setOrientation(orientation.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Orientation)
                obj.Cache.Orientation.setJavaObject(orientation.getJavaObject);
            end
        end
        
        function bodyrate = get.BodyRate(obj)
            %get.BodyRate Get the value for property BodyRate
            if isempty(obj.Cache.BodyRate)
                obj.Cache.BodyRate = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getBodyRate);
            end
            bodyrate = obj.Cache.BodyRate;
        end
        
        function set.BodyRate(obj, bodyrate)
            %set.BodyRate Set the value for property BodyRate
            validateattributes(bodyrate, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'AttitudeTarget', 'BodyRate');
            
            obj.JavaMessage.setBodyRate(bodyrate.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.BodyRate)
                obj.Cache.BodyRate.setJavaObject(bodyrate.getJavaObject);
            end
        end
        
        function thrust = get.Thrust(obj)
            %get.Thrust Get the value for property Thrust
            thrust = single(obj.JavaMessage.getThrust);
        end
        
        function set.Thrust(obj, thrust)
            %set.Thrust Set the value for property Thrust
            validateattributes(thrust, {'numeric'}, {'nonempty', 'scalar'}, 'AttitudeTarget', 'Thrust');
            
            obj.JavaMessage.setThrust(thrust);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Orientation = [];
            obj.Cache.BodyRate = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.TypeMask = obj.TypeMask;
            cpObj.Thrust = obj.Thrust;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Orientation = copy(obj.Orientation);
            cpObj.BodyRate = copy(obj.BodyRate);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.TypeMask = strObj.TypeMask;
            obj.Thrust = strObj.Thrust;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Orientation = feval([obj.GeometryMsgsQuaternionClass '.loadobj'], strObj.Orientation);
            obj.BodyRate = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.BodyRate);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.TypeMask = obj.TypeMask;
            strObj.Thrust = obj.Thrust;
            strObj.Header = saveobj(obj.Header);
            strObj.Orientation = saveobj(obj.Orientation);
            strObj.BodyRate = saveobj(obj.BodyRate);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.AttitudeTarget.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.AttitudeTarget;
            obj.reload(strObj);
        end
    end
end
