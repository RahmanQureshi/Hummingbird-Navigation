classdef Mavlink < robotics.ros.Message
    %Mavlink MATLAB implementation of mavros_msgs/Mavlink
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/Mavlink' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '41093e1fd0f3eea1da2aa33a177e5ba6' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        FRAMINGOK = uint8(1)
        FRAMINGBADCRC = uint8(2)
        FRAMINGBADSIGNATURE = uint8(3)
        MAVLINKV10 = uint8(254)
        MAVLINKV20 = uint8(253)
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        FramingStatus
        Magic
        Len
        IncompatFlags
        CompatFlags
        Seq
        Sysid
        Compid
        Msgid
        Checksum
        Payload64
        Signature
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Checksum', 'CompatFlags', 'Compid', 'FramingStatus', 'Header', 'IncompatFlags', 'Len', 'Magic', 'Msgid', 'Payload64', 'Seq', 'Signature', 'Sysid'} % List of non-constant message properties
        ROSPropertyList = {'checksum', 'compat_flags', 'compid', 'framing_status', 'header', 'incompat_flags', 'len', 'magic', 'msgid', 'payload64', 'seq', 'signature', 'sysid'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Mavlink(msg)
            %Mavlink Construct the message object Mavlink
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Mavlink', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function framingstatus = get.FramingStatus(obj)
            %get.FramingStatus Get the value for property FramingStatus
            framingstatus = typecast(int8(obj.JavaMessage.getFramingStatus), 'uint8');
        end
        
        function set.FramingStatus(obj, framingstatus)
            %set.FramingStatus Set the value for property FramingStatus
            validateattributes(framingstatus, {'numeric'}, {'nonempty', 'scalar'}, 'Mavlink', 'FramingStatus');
            
            obj.JavaMessage.setFramingStatus(framingstatus);
        end
        
        function magic = get.Magic(obj)
            %get.Magic Get the value for property Magic
            magic = typecast(int8(obj.JavaMessage.getMagic), 'uint8');
        end
        
        function set.Magic(obj, magic)
            %set.Magic Set the value for property Magic
            validateattributes(magic, {'numeric'}, {'nonempty', 'scalar'}, 'Mavlink', 'Magic');
            
            obj.JavaMessage.setMagic(magic);
        end
        
        function len = get.Len(obj)
            %get.Len Get the value for property Len
            len = typecast(int8(obj.JavaMessage.getLen), 'uint8');
        end
        
        function set.Len(obj, len)
            %set.Len Set the value for property Len
            validateattributes(len, {'numeric'}, {'nonempty', 'scalar'}, 'Mavlink', 'Len');
            
            obj.JavaMessage.setLen(len);
        end
        
        function incompatflags = get.IncompatFlags(obj)
            %get.IncompatFlags Get the value for property IncompatFlags
            incompatflags = typecast(int8(obj.JavaMessage.getIncompatFlags), 'uint8');
        end
        
        function set.IncompatFlags(obj, incompatflags)
            %set.IncompatFlags Set the value for property IncompatFlags
            validateattributes(incompatflags, {'numeric'}, {'nonempty', 'scalar'}, 'Mavlink', 'IncompatFlags');
            
            obj.JavaMessage.setIncompatFlags(incompatflags);
        end
        
        function compatflags = get.CompatFlags(obj)
            %get.CompatFlags Get the value for property CompatFlags
            compatflags = typecast(int8(obj.JavaMessage.getCompatFlags), 'uint8');
        end
        
        function set.CompatFlags(obj, compatflags)
            %set.CompatFlags Set the value for property CompatFlags
            validateattributes(compatflags, {'numeric'}, {'nonempty', 'scalar'}, 'Mavlink', 'CompatFlags');
            
            obj.JavaMessage.setCompatFlags(compatflags);
        end
        
        function seq = get.Seq(obj)
            %get.Seq Get the value for property Seq
            seq = typecast(int8(obj.JavaMessage.getSeq), 'uint8');
        end
        
        function set.Seq(obj, seq)
            %set.Seq Set the value for property Seq
            validateattributes(seq, {'numeric'}, {'nonempty', 'scalar'}, 'Mavlink', 'Seq');
            
            obj.JavaMessage.setSeq(seq);
        end
        
        function sysid = get.Sysid(obj)
            %get.Sysid Get the value for property Sysid
            sysid = typecast(int8(obj.JavaMessage.getSysid), 'uint8');
        end
        
        function set.Sysid(obj, sysid)
            %set.Sysid Set the value for property Sysid
            validateattributes(sysid, {'numeric'}, {'nonempty', 'scalar'}, 'Mavlink', 'Sysid');
            
            obj.JavaMessage.setSysid(sysid);
        end
        
        function compid = get.Compid(obj)
            %get.Compid Get the value for property Compid
            compid = typecast(int8(obj.JavaMessage.getCompid), 'uint8');
        end
        
        function set.Compid(obj, compid)
            %set.Compid Set the value for property Compid
            validateattributes(compid, {'numeric'}, {'nonempty', 'scalar'}, 'Mavlink', 'Compid');
            
            obj.JavaMessage.setCompid(compid);
        end
        
        function msgid = get.Msgid(obj)
            %get.Msgid Get the value for property Msgid
            msgid = typecast(int32(obj.JavaMessage.getMsgid), 'uint32');
        end
        
        function set.Msgid(obj, msgid)
            %set.Msgid Set the value for property Msgid
            validateattributes(msgid, {'numeric'}, {'nonempty', 'scalar'}, 'Mavlink', 'Msgid');
            
            obj.JavaMessage.setMsgid(msgid);
        end
        
        function checksum = get.Checksum(obj)
            %get.Checksum Get the value for property Checksum
            checksum = typecast(int16(obj.JavaMessage.getChecksum), 'uint16');
        end
        
        function set.Checksum(obj, checksum)
            %set.Checksum Set the value for property Checksum
            validateattributes(checksum, {'numeric'}, {'nonempty', 'scalar'}, 'Mavlink', 'Checksum');
            
            obj.JavaMessage.setChecksum(checksum);
        end
        
        function payload64 = get.Payload64(obj)
            %get.Payload64 Get the value for property Payload64
            javaArray = obj.JavaMessage.getPayload64;
            array = obj.readJavaArray(javaArray, 'uint64');
            payload64 = uint64(array);
        end
        
        function set.Payload64(obj, payload64)
            %set.Payload64 Set the value for property Payload64
            if ~isvector(payload64) && isempty(payload64)
                % Allow empty [] input
                payload64 = uint64.empty(0,1);
            end
            
            validateattributes(payload64, {'numeric'}, {'vector'}, 'Mavlink', 'Payload64');
            
            javaArray = obj.JavaMessage.getPayload64;
            array = obj.writeJavaArray(payload64, javaArray, 'uint64');
            obj.JavaMessage.setPayload64(array);
        end
        
        function signature = get.Signature(obj)
            %get.Signature Get the value for property Signature
            javaArray = obj.JavaMessage.getSignature;
            array = obj.readJavaArray(javaArray, 'uint8');
            signature = uint8(array);
        end
        
        function set.Signature(obj, signature)
            %set.Signature Set the value for property Signature
            if ~isvector(signature) && isempty(signature)
                % Allow empty [] input
                signature = uint8.empty(0,1);
            end
            
            validateattributes(signature, {'numeric'}, {'vector'}, 'Mavlink', 'Signature');
            
            javaArray = obj.JavaMessage.getSignature;
            array = obj.writeJavaArray(signature, javaArray, 'uint8');
            obj.JavaMessage.setSignature(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.FramingStatus = obj.FramingStatus;
            cpObj.Magic = obj.Magic;
            cpObj.Len = obj.Len;
            cpObj.IncompatFlags = obj.IncompatFlags;
            cpObj.CompatFlags = obj.CompatFlags;
            cpObj.Seq = obj.Seq;
            cpObj.Sysid = obj.Sysid;
            cpObj.Compid = obj.Compid;
            cpObj.Msgid = obj.Msgid;
            cpObj.Checksum = obj.Checksum;
            cpObj.Payload64 = obj.Payload64;
            cpObj.Signature = obj.Signature;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.FramingStatus = strObj.FramingStatus;
            obj.Magic = strObj.Magic;
            obj.Len = strObj.Len;
            obj.IncompatFlags = strObj.IncompatFlags;
            obj.CompatFlags = strObj.CompatFlags;
            obj.Seq = strObj.Seq;
            obj.Sysid = strObj.Sysid;
            obj.Compid = strObj.Compid;
            obj.Msgid = strObj.Msgid;
            obj.Checksum = strObj.Checksum;
            obj.Payload64 = strObj.Payload64;
            obj.Signature = strObj.Signature;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.FramingStatus = obj.FramingStatus;
            strObj.Magic = obj.Magic;
            strObj.Len = obj.Len;
            strObj.IncompatFlags = obj.IncompatFlags;
            strObj.CompatFlags = obj.CompatFlags;
            strObj.Seq = obj.Seq;
            strObj.Sysid = obj.Sysid;
            strObj.Compid = obj.Compid;
            strObj.Msgid = obj.Msgid;
            strObj.Checksum = obj.Checksum;
            strObj.Payload64 = obj.Payload64;
            strObj.Signature = obj.Signature;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.Mavlink.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.Mavlink;
            obj.reload(strObj);
        end
    end
end
