classdef CommandTOLRequest < robotics.ros.Message
    %CommandTOLRequest MATLAB implementation of mavros_msgs/CommandTOLRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/CommandTOLRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '5aec7e34bcfe9ec68949aebae7bcd1ec' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        MinPitch
        Yaw
        Latitude
        Longitude
        Altitude
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Altitude', 'Latitude', 'Longitude', 'MinPitch', 'Yaw'} % List of non-constant message properties
        ROSPropertyList = {'altitude', 'latitude', 'longitude', 'min_pitch', 'yaw'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = CommandTOLRequest(msg)
            %CommandTOLRequest Construct the message object CommandTOLRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function minpitch = get.MinPitch(obj)
            %get.MinPitch Get the value for property MinPitch
            minpitch = single(obj.JavaMessage.getMinPitch);
        end
        
        function set.MinPitch(obj, minpitch)
            %set.MinPitch Set the value for property MinPitch
            validateattributes(minpitch, {'numeric'}, {'nonempty', 'scalar'}, 'CommandTOLRequest', 'MinPitch');
            
            obj.JavaMessage.setMinPitch(minpitch);
        end
        
        function yaw = get.Yaw(obj)
            %get.Yaw Get the value for property Yaw
            yaw = single(obj.JavaMessage.getYaw);
        end
        
        function set.Yaw(obj, yaw)
            %set.Yaw Set the value for property Yaw
            validateattributes(yaw, {'numeric'}, {'nonempty', 'scalar'}, 'CommandTOLRequest', 'Yaw');
            
            obj.JavaMessage.setYaw(yaw);
        end
        
        function latitude = get.Latitude(obj)
            %get.Latitude Get the value for property Latitude
            latitude = single(obj.JavaMessage.getLatitude);
        end
        
        function set.Latitude(obj, latitude)
            %set.Latitude Set the value for property Latitude
            validateattributes(latitude, {'numeric'}, {'nonempty', 'scalar'}, 'CommandTOLRequest', 'Latitude');
            
            obj.JavaMessage.setLatitude(latitude);
        end
        
        function longitude = get.Longitude(obj)
            %get.Longitude Get the value for property Longitude
            longitude = single(obj.JavaMessage.getLongitude);
        end
        
        function set.Longitude(obj, longitude)
            %set.Longitude Set the value for property Longitude
            validateattributes(longitude, {'numeric'}, {'nonempty', 'scalar'}, 'CommandTOLRequest', 'Longitude');
            
            obj.JavaMessage.setLongitude(longitude);
        end
        
        function altitude = get.Altitude(obj)
            %get.Altitude Get the value for property Altitude
            altitude = single(obj.JavaMessage.getAltitude);
        end
        
        function set.Altitude(obj, altitude)
            %set.Altitude Set the value for property Altitude
            validateattributes(altitude, {'numeric'}, {'nonempty', 'scalar'}, 'CommandTOLRequest', 'Altitude');
            
            obj.JavaMessage.setAltitude(altitude);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.MinPitch = obj.MinPitch;
            cpObj.Yaw = obj.Yaw;
            cpObj.Latitude = obj.Latitude;
            cpObj.Longitude = obj.Longitude;
            cpObj.Altitude = obj.Altitude;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.MinPitch = strObj.MinPitch;
            obj.Yaw = strObj.Yaw;
            obj.Latitude = strObj.Latitude;
            obj.Longitude = strObj.Longitude;
            obj.Altitude = strObj.Altitude;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.MinPitch = obj.MinPitch;
            strObj.Yaw = obj.Yaw;
            strObj.Latitude = obj.Latitude;
            strObj.Longitude = obj.Longitude;
            strObj.Altitude = obj.Altitude;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.CommandTOLRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.CommandTOLRequest;
            obj.reload(strObj);
        end
    end
end
