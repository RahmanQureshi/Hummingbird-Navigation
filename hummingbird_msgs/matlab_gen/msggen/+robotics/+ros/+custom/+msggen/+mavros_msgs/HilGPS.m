classdef HilGPS < robotics.ros.Message
    %HilGPS MATLAB implementation of mavros_msgs/HilGPS
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/HilGPS' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '313b3baf2319db196fa18376a4900a7b' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeographicMsgsGeoPointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geographic_msgs/GeoPoint') % Dispatch to MATLAB class for message type geographic_msgs/GeoPoint
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        FixType
        Geo
        Eph
        Epv
        Vel
        Vn
        Ve
        Vd
        Cog
        SatellitesVisible
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Geo', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Cog', 'Eph', 'Epv', 'FixType', 'Geo', 'Header', 'SatellitesVisible', 'Vd', 'Ve', 'Vel', 'Vn'} % List of non-constant message properties
        ROSPropertyList = {'cog', 'eph', 'epv', 'fix_type', 'geo', 'header', 'satellites_visible', 'vd', 've', 'vel', 'vn'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = HilGPS(msg)
            %HilGPS Construct the message object HilGPS
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'HilGPS', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function fixtype = get.FixType(obj)
            %get.FixType Get the value for property FixType
            fixtype = typecast(int8(obj.JavaMessage.getFixType), 'uint8');
        end
        
        function set.FixType(obj, fixtype)
            %set.FixType Set the value for property FixType
            validateattributes(fixtype, {'numeric'}, {'nonempty', 'scalar'}, 'HilGPS', 'FixType');
            
            obj.JavaMessage.setFixType(fixtype);
        end
        
        function geo = get.Geo(obj)
            %get.Geo Get the value for property Geo
            if isempty(obj.Cache.Geo)
                obj.Cache.Geo = feval(obj.GeographicMsgsGeoPointClass, obj.JavaMessage.getGeo);
            end
            geo = obj.Cache.Geo;
        end
        
        function set.Geo(obj, geo)
            %set.Geo Set the value for property Geo
            validateattributes(geo, {obj.GeographicMsgsGeoPointClass}, {'nonempty', 'scalar'}, 'HilGPS', 'Geo');
            
            obj.JavaMessage.setGeo(geo.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Geo)
                obj.Cache.Geo.setJavaObject(geo.getJavaObject);
            end
        end
        
        function eph = get.Eph(obj)
            %get.Eph Get the value for property Eph
            eph = typecast(int16(obj.JavaMessage.getEph), 'uint16');
        end
        
        function set.Eph(obj, eph)
            %set.Eph Set the value for property Eph
            validateattributes(eph, {'numeric'}, {'nonempty', 'scalar'}, 'HilGPS', 'Eph');
            
            obj.JavaMessage.setEph(eph);
        end
        
        function epv = get.Epv(obj)
            %get.Epv Get the value for property Epv
            epv = typecast(int16(obj.JavaMessage.getEpv), 'uint16');
        end
        
        function set.Epv(obj, epv)
            %set.Epv Set the value for property Epv
            validateattributes(epv, {'numeric'}, {'nonempty', 'scalar'}, 'HilGPS', 'Epv');
            
            obj.JavaMessage.setEpv(epv);
        end
        
        function vel = get.Vel(obj)
            %get.Vel Get the value for property Vel
            vel = typecast(int16(obj.JavaMessage.getVel), 'uint16');
        end
        
        function set.Vel(obj, vel)
            %set.Vel Set the value for property Vel
            validateattributes(vel, {'numeric'}, {'nonempty', 'scalar'}, 'HilGPS', 'Vel');
            
            obj.JavaMessage.setVel(vel);
        end
        
        function vn = get.Vn(obj)
            %get.Vn Get the value for property Vn
            vn = int16(obj.JavaMessage.getVn);
        end
        
        function set.Vn(obj, vn)
            %set.Vn Set the value for property Vn
            validateattributes(vn, {'numeric'}, {'nonempty', 'scalar'}, 'HilGPS', 'Vn');
            
            obj.JavaMessage.setVn(vn);
        end
        
        function ve = get.Ve(obj)
            %get.Ve Get the value for property Ve
            ve = int16(obj.JavaMessage.getVe);
        end
        
        function set.Ve(obj, ve)
            %set.Ve Set the value for property Ve
            validateattributes(ve, {'numeric'}, {'nonempty', 'scalar'}, 'HilGPS', 'Ve');
            
            obj.JavaMessage.setVe(ve);
        end
        
        function vd = get.Vd(obj)
            %get.Vd Get the value for property Vd
            vd = int16(obj.JavaMessage.getVd);
        end
        
        function set.Vd(obj, vd)
            %set.Vd Set the value for property Vd
            validateattributes(vd, {'numeric'}, {'nonempty', 'scalar'}, 'HilGPS', 'Vd');
            
            obj.JavaMessage.setVd(vd);
        end
        
        function cog = get.Cog(obj)
            %get.Cog Get the value for property Cog
            cog = typecast(int16(obj.JavaMessage.getCog), 'uint16');
        end
        
        function set.Cog(obj, cog)
            %set.Cog Set the value for property Cog
            validateattributes(cog, {'numeric'}, {'nonempty', 'scalar'}, 'HilGPS', 'Cog');
            
            obj.JavaMessage.setCog(cog);
        end
        
        function satellitesvisible = get.SatellitesVisible(obj)
            %get.SatellitesVisible Get the value for property SatellitesVisible
            satellitesvisible = typecast(int8(obj.JavaMessage.getSatellitesVisible), 'uint8');
        end
        
        function set.SatellitesVisible(obj, satellitesvisible)
            %set.SatellitesVisible Set the value for property SatellitesVisible
            validateattributes(satellitesvisible, {'numeric'}, {'nonempty', 'scalar'}, 'HilGPS', 'SatellitesVisible');
            
            obj.JavaMessage.setSatellitesVisible(satellitesvisible);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Geo = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.FixType = obj.FixType;
            cpObj.Eph = obj.Eph;
            cpObj.Epv = obj.Epv;
            cpObj.Vel = obj.Vel;
            cpObj.Vn = obj.Vn;
            cpObj.Ve = obj.Ve;
            cpObj.Vd = obj.Vd;
            cpObj.Cog = obj.Cog;
            cpObj.SatellitesVisible = obj.SatellitesVisible;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Geo = copy(obj.Geo);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.FixType = strObj.FixType;
            obj.Eph = strObj.Eph;
            obj.Epv = strObj.Epv;
            obj.Vel = strObj.Vel;
            obj.Vn = strObj.Vn;
            obj.Ve = strObj.Ve;
            obj.Vd = strObj.Vd;
            obj.Cog = strObj.Cog;
            obj.SatellitesVisible = strObj.SatellitesVisible;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Geo = feval([obj.GeographicMsgsGeoPointClass '.loadobj'], strObj.Geo);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.FixType = obj.FixType;
            strObj.Eph = obj.Eph;
            strObj.Epv = obj.Epv;
            strObj.Vel = obj.Vel;
            strObj.Vn = obj.Vn;
            strObj.Ve = obj.Ve;
            strObj.Vd = obj.Vd;
            strObj.Cog = obj.Cog;
            strObj.SatellitesVisible = obj.SatellitesVisible;
            strObj.Header = saveobj(obj.Header);
            strObj.Geo = saveobj(obj.Geo);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.HilGPS.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.HilGPS;
            obj.reload(strObj);
        end
    end
end
