classdef VFR_HUD < robotics.ros.Message
    %VFR_HUD MATLAB implementation of mavros_msgs/VFR_HUD
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/VFR_HUD' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '1f55e210c3d39fe105d44d8dc963655f' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Airspeed
        Groundspeed
        Heading
        Throttle
        Altitude
        Climb
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Airspeed', 'Altitude', 'Climb', 'Groundspeed', 'Header', 'Heading', 'Throttle'} % List of non-constant message properties
        ROSPropertyList = {'airspeed', 'altitude', 'climb', 'groundspeed', 'header', 'heading', 'throttle'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = VFR_HUD(msg)
            %VFR_HUD Construct the message object VFR_HUD
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'VFR_HUD', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function airspeed = get.Airspeed(obj)
            %get.Airspeed Get the value for property Airspeed
            airspeed = single(obj.JavaMessage.getAirspeed);
        end
        
        function set.Airspeed(obj, airspeed)
            %set.Airspeed Set the value for property Airspeed
            validateattributes(airspeed, {'numeric'}, {'nonempty', 'scalar'}, 'VFR_HUD', 'Airspeed');
            
            obj.JavaMessage.setAirspeed(airspeed);
        end
        
        function groundspeed = get.Groundspeed(obj)
            %get.Groundspeed Get the value for property Groundspeed
            groundspeed = single(obj.JavaMessage.getGroundspeed);
        end
        
        function set.Groundspeed(obj, groundspeed)
            %set.Groundspeed Set the value for property Groundspeed
            validateattributes(groundspeed, {'numeric'}, {'nonempty', 'scalar'}, 'VFR_HUD', 'Groundspeed');
            
            obj.JavaMessage.setGroundspeed(groundspeed);
        end
        
        function heading = get.Heading(obj)
            %get.Heading Get the value for property Heading
            heading = int16(obj.JavaMessage.getHeading);
        end
        
        function set.Heading(obj, heading)
            %set.Heading Set the value for property Heading
            validateattributes(heading, {'numeric'}, {'nonempty', 'scalar'}, 'VFR_HUD', 'Heading');
            
            obj.JavaMessage.setHeading(heading);
        end
        
        function throttle = get.Throttle(obj)
            %get.Throttle Get the value for property Throttle
            throttle = single(obj.JavaMessage.getThrottle);
        end
        
        function set.Throttle(obj, throttle)
            %set.Throttle Set the value for property Throttle
            validateattributes(throttle, {'numeric'}, {'nonempty', 'scalar'}, 'VFR_HUD', 'Throttle');
            
            obj.JavaMessage.setThrottle(throttle);
        end
        
        function altitude = get.Altitude(obj)
            %get.Altitude Get the value for property Altitude
            altitude = single(obj.JavaMessage.getAltitude);
        end
        
        function set.Altitude(obj, altitude)
            %set.Altitude Set the value for property Altitude
            validateattributes(altitude, {'numeric'}, {'nonempty', 'scalar'}, 'VFR_HUD', 'Altitude');
            
            obj.JavaMessage.setAltitude(altitude);
        end
        
        function climb = get.Climb(obj)
            %get.Climb Get the value for property Climb
            climb = single(obj.JavaMessage.getClimb);
        end
        
        function set.Climb(obj, climb)
            %set.Climb Set the value for property Climb
            validateattributes(climb, {'numeric'}, {'nonempty', 'scalar'}, 'VFR_HUD', 'Climb');
            
            obj.JavaMessage.setClimb(climb);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Airspeed = obj.Airspeed;
            cpObj.Groundspeed = obj.Groundspeed;
            cpObj.Heading = obj.Heading;
            cpObj.Throttle = obj.Throttle;
            cpObj.Altitude = obj.Altitude;
            cpObj.Climb = obj.Climb;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Airspeed = strObj.Airspeed;
            obj.Groundspeed = strObj.Groundspeed;
            obj.Heading = strObj.Heading;
            obj.Throttle = strObj.Throttle;
            obj.Altitude = strObj.Altitude;
            obj.Climb = strObj.Climb;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Airspeed = obj.Airspeed;
            strObj.Groundspeed = obj.Groundspeed;
            strObj.Heading = obj.Heading;
            strObj.Throttle = obj.Throttle;
            strObj.Altitude = obj.Altitude;
            strObj.Climb = obj.Climb;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.VFR_HUD.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.VFR_HUD;
            obj.reload(strObj);
        end
    end
end
