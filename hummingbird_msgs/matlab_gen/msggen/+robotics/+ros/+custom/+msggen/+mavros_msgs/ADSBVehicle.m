classdef ADSBVehicle < robotics.ros.Message
    %ADSBVehicle MATLAB implementation of mavros_msgs/ADSBVehicle
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/ADSBVehicle' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'f71cc75a8e9e7b77d92f98d9a5315fd1' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        ALTPRESSUREQNH = uint8(0)
        ALTGEOMETRIC = uint8(1)
        EMITTERNOINFO = uint8(0)
        EMITTERLIGHT = uint8(1)
        EMITTERSMALL = uint8(2)
        EMITTERLARGE = uint8(3)
        EMITTERHIGHVORTEXLARGE = uint8(4)
        EMITTERHEAVY = uint8(5)
        EMITTERHIGHLYMANUV = uint8(6)
        EMITTERROTOCRAFT = uint8(7)
        EMITTERUNASSIGNED = uint8(8)
        EMITTERGLIDER = uint8(9)
        EMITTERLIGHTERAIR = uint8(10)
        EMITTERPARACHUTE = uint8(11)
        EMITTERULTRALIGHT = uint8(12)
        EMITTERUNASSIGNED2 = uint8(13)
        EMITTERUAV = uint8(14)
        EMITTERSPACE = uint8(15)
        EMITTERUNASSGINED3 = uint8(16)
        EMITTEREMERGENCYSURFACE = uint8(17)
        EMITTERSERVICESURFACE = uint8(18)
        EMITTERPOINTOBSTACLE = uint8(19)
        FLAGVALIDCOORDS = uint16(1)
        FLAGVALIDALTITUDE = uint16(2)
        FLAGVALIDHEADING = uint16(4)
        FLAGVALIDVELOCITY = uint16(8)
        FLAGVALIDCALLSIGN = uint16(16)
        FLAGVALIDSQUAWK = uint16(32)
        FLAGSIMULATED = uint16(64)
    end
    
    properties (Constant, Access = protected)
        DurationClass = robotics.ros.msg.internal.MessageFactory.getClassForType('duration') % Dispatch to MATLAB class for message type duration
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        ICAOAddress
        Callsign
        Latitude
        Longitude
        Altitude
        Heading
        HorVelocity
        VerVelocity
        AltitudeType
        EmitterType
        Tslc
        Flags
        Squawk
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Tslc', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Altitude', 'AltitudeType', 'Callsign', 'EmitterType', 'Flags', 'Header', 'Heading', 'HorVelocity', 'ICAOAddress', 'Latitude', 'Longitude', 'Squawk', 'Tslc', 'VerVelocity'} % List of non-constant message properties
        ROSPropertyList = {'altitude', 'altitude_type', 'callsign', 'emitter_type', 'flags', 'header', 'heading', 'hor_velocity', 'ICAO_address', 'latitude', 'longitude', 'squawk', 'tslc', 'ver_velocity'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ADSBVehicle(msg)
            %ADSBVehicle Construct the message object ADSBVehicle
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ADSBVehicle', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function icaoaddress = get.ICAOAddress(obj)
            %get.ICAOAddress Get the value for property ICAOAddress
            icaoaddress = typecast(int32(obj.JavaMessage.getICAOAddress), 'uint32');
        end
        
        function set.ICAOAddress(obj, icaoaddress)
            %set.ICAOAddress Set the value for property ICAOAddress
            validateattributes(icaoaddress, {'numeric'}, {'nonempty', 'scalar'}, 'ADSBVehicle', 'ICAOAddress');
            
            obj.JavaMessage.setICAOAddress(icaoaddress);
        end
        
        function callsign = get.Callsign(obj)
            %get.Callsign Get the value for property Callsign
            callsign = char(obj.JavaMessage.getCallsign);
        end
        
        function set.Callsign(obj, callsign)
            %set.Callsign Set the value for property Callsign
            validateattributes(callsign, {'char'}, {}, 'ADSBVehicle', 'Callsign');
            
            obj.JavaMessage.setCallsign(callsign);
        end
        
        function latitude = get.Latitude(obj)
            %get.Latitude Get the value for property Latitude
            latitude = double(obj.JavaMessage.getLatitude);
        end
        
        function set.Latitude(obj, latitude)
            %set.Latitude Set the value for property Latitude
            validateattributes(latitude, {'numeric'}, {'nonempty', 'scalar'}, 'ADSBVehicle', 'Latitude');
            
            obj.JavaMessage.setLatitude(latitude);
        end
        
        function longitude = get.Longitude(obj)
            %get.Longitude Get the value for property Longitude
            longitude = double(obj.JavaMessage.getLongitude);
        end
        
        function set.Longitude(obj, longitude)
            %set.Longitude Set the value for property Longitude
            validateattributes(longitude, {'numeric'}, {'nonempty', 'scalar'}, 'ADSBVehicle', 'Longitude');
            
            obj.JavaMessage.setLongitude(longitude);
        end
        
        function altitude = get.Altitude(obj)
            %get.Altitude Get the value for property Altitude
            altitude = single(obj.JavaMessage.getAltitude);
        end
        
        function set.Altitude(obj, altitude)
            %set.Altitude Set the value for property Altitude
            validateattributes(altitude, {'numeric'}, {'nonempty', 'scalar'}, 'ADSBVehicle', 'Altitude');
            
            obj.JavaMessage.setAltitude(altitude);
        end
        
        function heading = get.Heading(obj)
            %get.Heading Get the value for property Heading
            heading = single(obj.JavaMessage.getHeading);
        end
        
        function set.Heading(obj, heading)
            %set.Heading Set the value for property Heading
            validateattributes(heading, {'numeric'}, {'nonempty', 'scalar'}, 'ADSBVehicle', 'Heading');
            
            obj.JavaMessage.setHeading(heading);
        end
        
        function horvelocity = get.HorVelocity(obj)
            %get.HorVelocity Get the value for property HorVelocity
            horvelocity = single(obj.JavaMessage.getHorVelocity);
        end
        
        function set.HorVelocity(obj, horvelocity)
            %set.HorVelocity Set the value for property HorVelocity
            validateattributes(horvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'ADSBVehicle', 'HorVelocity');
            
            obj.JavaMessage.setHorVelocity(horvelocity);
        end
        
        function vervelocity = get.VerVelocity(obj)
            %get.VerVelocity Get the value for property VerVelocity
            vervelocity = single(obj.JavaMessage.getVerVelocity);
        end
        
        function set.VerVelocity(obj, vervelocity)
            %set.VerVelocity Set the value for property VerVelocity
            validateattributes(vervelocity, {'numeric'}, {'nonempty', 'scalar'}, 'ADSBVehicle', 'VerVelocity');
            
            obj.JavaMessage.setVerVelocity(vervelocity);
        end
        
        function altitudetype = get.AltitudeType(obj)
            %get.AltitudeType Get the value for property AltitudeType
            altitudetype = typecast(int8(obj.JavaMessage.getAltitudeType), 'uint8');
        end
        
        function set.AltitudeType(obj, altitudetype)
            %set.AltitudeType Set the value for property AltitudeType
            validateattributes(altitudetype, {'numeric'}, {'nonempty', 'scalar'}, 'ADSBVehicle', 'AltitudeType');
            
            obj.JavaMessage.setAltitudeType(altitudetype);
        end
        
        function emittertype = get.EmitterType(obj)
            %get.EmitterType Get the value for property EmitterType
            emittertype = typecast(int8(obj.JavaMessage.getEmitterType), 'uint8');
        end
        
        function set.EmitterType(obj, emittertype)
            %set.EmitterType Set the value for property EmitterType
            validateattributes(emittertype, {'numeric'}, {'nonempty', 'scalar'}, 'ADSBVehicle', 'EmitterType');
            
            obj.JavaMessage.setEmitterType(emittertype);
        end
        
        function tslc = get.Tslc(obj)
            %get.Tslc Get the value for property Tslc
            if isempty(obj.Cache.Tslc)
                obj.Cache.Tslc = feval(obj.DurationClass, obj.JavaMessage.getTslc);
            end
            tslc = obj.Cache.Tslc;
        end
        
        function set.Tslc(obj, tslc)
            %set.Tslc Set the value for property Tslc
            validateattributes(tslc, {obj.DurationClass}, {'nonempty', 'scalar'}, 'ADSBVehicle', 'Tslc');
            
            obj.JavaMessage.setTslc(tslc.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Tslc)
                obj.Cache.Tslc.setJavaObject(tslc.getJavaObject);
            end
        end
        
        function flags = get.Flags(obj)
            %get.Flags Get the value for property Flags
            flags = typecast(int16(obj.JavaMessage.getFlags), 'uint16');
        end
        
        function set.Flags(obj, flags)
            %set.Flags Set the value for property Flags
            validateattributes(flags, {'numeric'}, {'nonempty', 'scalar'}, 'ADSBVehicle', 'Flags');
            
            obj.JavaMessage.setFlags(flags);
        end
        
        function squawk = get.Squawk(obj)
            %get.Squawk Get the value for property Squawk
            squawk = typecast(int16(obj.JavaMessage.getSquawk), 'uint16');
        end
        
        function set.Squawk(obj, squawk)
            %set.Squawk Set the value for property Squawk
            validateattributes(squawk, {'numeric'}, {'nonempty', 'scalar'}, 'ADSBVehicle', 'Squawk');
            
            obj.JavaMessage.setSquawk(squawk);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Tslc = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ICAOAddress = obj.ICAOAddress;
            cpObj.Callsign = obj.Callsign;
            cpObj.Latitude = obj.Latitude;
            cpObj.Longitude = obj.Longitude;
            cpObj.Altitude = obj.Altitude;
            cpObj.Heading = obj.Heading;
            cpObj.HorVelocity = obj.HorVelocity;
            cpObj.VerVelocity = obj.VerVelocity;
            cpObj.AltitudeType = obj.AltitudeType;
            cpObj.EmitterType = obj.EmitterType;
            cpObj.Flags = obj.Flags;
            cpObj.Squawk = obj.Squawk;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Tslc = copy(obj.Tslc);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ICAOAddress = strObj.ICAOAddress;
            obj.Callsign = strObj.Callsign;
            obj.Latitude = strObj.Latitude;
            obj.Longitude = strObj.Longitude;
            obj.Altitude = strObj.Altitude;
            obj.Heading = strObj.Heading;
            obj.HorVelocity = strObj.HorVelocity;
            obj.VerVelocity = strObj.VerVelocity;
            obj.AltitudeType = strObj.AltitudeType;
            obj.EmitterType = strObj.EmitterType;
            obj.Flags = strObj.Flags;
            obj.Squawk = strObj.Squawk;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Tslc = feval([obj.DurationClass '.loadobj'], strObj.Tslc);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ICAOAddress = obj.ICAOAddress;
            strObj.Callsign = obj.Callsign;
            strObj.Latitude = obj.Latitude;
            strObj.Longitude = obj.Longitude;
            strObj.Altitude = obj.Altitude;
            strObj.Heading = obj.Heading;
            strObj.HorVelocity = obj.HorVelocity;
            strObj.VerVelocity = obj.VerVelocity;
            strObj.AltitudeType = obj.AltitudeType;
            strObj.EmitterType = obj.EmitterType;
            strObj.Flags = obj.Flags;
            strObj.Squawk = obj.Squawk;
            strObj.Header = saveobj(obj.Header);
            strObj.Tslc = saveobj(obj.Tslc);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.ADSBVehicle.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.ADSBVehicle;
            obj.reload(strObj);
        end
    end
end
