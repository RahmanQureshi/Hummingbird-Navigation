classdef HilControls < robotics.ros.Message
    %HilControls MATLAB implementation of mavros_msgs/HilControls
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/HilControls' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '698148349c3a2e5720afcae2d934acca' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        RollAilerons
        PitchElevator
        YawRudder
        Throttle
        Aux1
        Aux2
        Aux3
        Aux4
        Mode
        NavMode
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Aux1', 'Aux2', 'Aux3', 'Aux4', 'Header', 'Mode', 'NavMode', 'PitchElevator', 'RollAilerons', 'Throttle', 'YawRudder'} % List of non-constant message properties
        ROSPropertyList = {'aux1', 'aux2', 'aux3', 'aux4', 'header', 'mode', 'nav_mode', 'pitch_elevator', 'roll_ailerons', 'throttle', 'yaw_rudder'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = HilControls(msg)
            %HilControls Construct the message object HilControls
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'HilControls', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function rollailerons = get.RollAilerons(obj)
            %get.RollAilerons Get the value for property RollAilerons
            rollailerons = single(obj.JavaMessage.getRollAilerons);
        end
        
        function set.RollAilerons(obj, rollailerons)
            %set.RollAilerons Set the value for property RollAilerons
            validateattributes(rollailerons, {'numeric'}, {'nonempty', 'scalar'}, 'HilControls', 'RollAilerons');
            
            obj.JavaMessage.setRollAilerons(rollailerons);
        end
        
        function pitchelevator = get.PitchElevator(obj)
            %get.PitchElevator Get the value for property PitchElevator
            pitchelevator = single(obj.JavaMessage.getPitchElevator);
        end
        
        function set.PitchElevator(obj, pitchelevator)
            %set.PitchElevator Set the value for property PitchElevator
            validateattributes(pitchelevator, {'numeric'}, {'nonempty', 'scalar'}, 'HilControls', 'PitchElevator');
            
            obj.JavaMessage.setPitchElevator(pitchelevator);
        end
        
        function yawrudder = get.YawRudder(obj)
            %get.YawRudder Get the value for property YawRudder
            yawrudder = single(obj.JavaMessage.getYawRudder);
        end
        
        function set.YawRudder(obj, yawrudder)
            %set.YawRudder Set the value for property YawRudder
            validateattributes(yawrudder, {'numeric'}, {'nonempty', 'scalar'}, 'HilControls', 'YawRudder');
            
            obj.JavaMessage.setYawRudder(yawrudder);
        end
        
        function throttle = get.Throttle(obj)
            %get.Throttle Get the value for property Throttle
            throttle = single(obj.JavaMessage.getThrottle);
        end
        
        function set.Throttle(obj, throttle)
            %set.Throttle Set the value for property Throttle
            validateattributes(throttle, {'numeric'}, {'nonempty', 'scalar'}, 'HilControls', 'Throttle');
            
            obj.JavaMessage.setThrottle(throttle);
        end
        
        function aux1 = get.Aux1(obj)
            %get.Aux1 Get the value for property Aux1
            aux1 = single(obj.JavaMessage.getAux1);
        end
        
        function set.Aux1(obj, aux1)
            %set.Aux1 Set the value for property Aux1
            validateattributes(aux1, {'numeric'}, {'nonempty', 'scalar'}, 'HilControls', 'Aux1');
            
            obj.JavaMessage.setAux1(aux1);
        end
        
        function aux2 = get.Aux2(obj)
            %get.Aux2 Get the value for property Aux2
            aux2 = single(obj.JavaMessage.getAux2);
        end
        
        function set.Aux2(obj, aux2)
            %set.Aux2 Set the value for property Aux2
            validateattributes(aux2, {'numeric'}, {'nonempty', 'scalar'}, 'HilControls', 'Aux2');
            
            obj.JavaMessage.setAux2(aux2);
        end
        
        function aux3 = get.Aux3(obj)
            %get.Aux3 Get the value for property Aux3
            aux3 = single(obj.JavaMessage.getAux3);
        end
        
        function set.Aux3(obj, aux3)
            %set.Aux3 Set the value for property Aux3
            validateattributes(aux3, {'numeric'}, {'nonempty', 'scalar'}, 'HilControls', 'Aux3');
            
            obj.JavaMessage.setAux3(aux3);
        end
        
        function aux4 = get.Aux4(obj)
            %get.Aux4 Get the value for property Aux4
            aux4 = single(obj.JavaMessage.getAux4);
        end
        
        function set.Aux4(obj, aux4)
            %set.Aux4 Set the value for property Aux4
            validateattributes(aux4, {'numeric'}, {'nonempty', 'scalar'}, 'HilControls', 'Aux4');
            
            obj.JavaMessage.setAux4(aux4);
        end
        
        function mode = get.Mode(obj)
            %get.Mode Get the value for property Mode
            mode = typecast(int8(obj.JavaMessage.getMode), 'uint8');
        end
        
        function set.Mode(obj, mode)
            %set.Mode Set the value for property Mode
            validateattributes(mode, {'numeric'}, {'nonempty', 'scalar'}, 'HilControls', 'Mode');
            
            obj.JavaMessage.setMode(mode);
        end
        
        function navmode = get.NavMode(obj)
            %get.NavMode Get the value for property NavMode
            navmode = typecast(int8(obj.JavaMessage.getNavMode), 'uint8');
        end
        
        function set.NavMode(obj, navmode)
            %set.NavMode Set the value for property NavMode
            validateattributes(navmode, {'numeric'}, {'nonempty', 'scalar'}, 'HilControls', 'NavMode');
            
            obj.JavaMessage.setNavMode(navmode);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.RollAilerons = obj.RollAilerons;
            cpObj.PitchElevator = obj.PitchElevator;
            cpObj.YawRudder = obj.YawRudder;
            cpObj.Throttle = obj.Throttle;
            cpObj.Aux1 = obj.Aux1;
            cpObj.Aux2 = obj.Aux2;
            cpObj.Aux3 = obj.Aux3;
            cpObj.Aux4 = obj.Aux4;
            cpObj.Mode = obj.Mode;
            cpObj.NavMode = obj.NavMode;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.RollAilerons = strObj.RollAilerons;
            obj.PitchElevator = strObj.PitchElevator;
            obj.YawRudder = strObj.YawRudder;
            obj.Throttle = strObj.Throttle;
            obj.Aux1 = strObj.Aux1;
            obj.Aux2 = strObj.Aux2;
            obj.Aux3 = strObj.Aux3;
            obj.Aux4 = strObj.Aux4;
            obj.Mode = strObj.Mode;
            obj.NavMode = strObj.NavMode;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.RollAilerons = obj.RollAilerons;
            strObj.PitchElevator = obj.PitchElevator;
            strObj.YawRudder = obj.YawRudder;
            strObj.Throttle = obj.Throttle;
            strObj.Aux1 = obj.Aux1;
            strObj.Aux2 = obj.Aux2;
            strObj.Aux3 = obj.Aux3;
            strObj.Aux4 = obj.Aux4;
            strObj.Mode = obj.Mode;
            strObj.NavMode = obj.NavMode;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.HilControls.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.HilControls;
            obj.reload(strObj);
        end
    end
end
