classdef OpticalFlowRad < robotics.ros.Message
    %OpticalFlowRad MATLAB implementation of mavros_msgs/OpticalFlowRad
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/OpticalFlowRad' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '65d93e03c6188c7ee30415b2a39ad40d' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        IntegrationTimeUs
        IntegratedX
        IntegratedY
        IntegratedXgyro
        IntegratedYgyro
        IntegratedZgyro
        Temperature
        Quality
        TimeDeltaDistanceUs
        Distance
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Distance', 'Header', 'IntegratedX', 'IntegratedXgyro', 'IntegratedY', 'IntegratedYgyro', 'IntegratedZgyro', 'IntegrationTimeUs', 'Quality', 'Temperature', 'TimeDeltaDistanceUs'} % List of non-constant message properties
        ROSPropertyList = {'distance', 'header', 'integrated_x', 'integrated_xgyro', 'integrated_y', 'integrated_ygyro', 'integrated_zgyro', 'integration_time_us', 'quality', 'temperature', 'time_delta_distance_us'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = OpticalFlowRad(msg)
            %OpticalFlowRad Construct the message object OpticalFlowRad
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'OpticalFlowRad', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function integrationtimeus = get.IntegrationTimeUs(obj)
            %get.IntegrationTimeUs Get the value for property IntegrationTimeUs
            integrationtimeus = typecast(int32(obj.JavaMessage.getIntegrationTimeUs), 'uint32');
        end
        
        function set.IntegrationTimeUs(obj, integrationtimeus)
            %set.IntegrationTimeUs Set the value for property IntegrationTimeUs
            validateattributes(integrationtimeus, {'numeric'}, {'nonempty', 'scalar'}, 'OpticalFlowRad', 'IntegrationTimeUs');
            
            obj.JavaMessage.setIntegrationTimeUs(integrationtimeus);
        end
        
        function integratedx = get.IntegratedX(obj)
            %get.IntegratedX Get the value for property IntegratedX
            integratedx = single(obj.JavaMessage.getIntegratedX);
        end
        
        function set.IntegratedX(obj, integratedx)
            %set.IntegratedX Set the value for property IntegratedX
            validateattributes(integratedx, {'numeric'}, {'nonempty', 'scalar'}, 'OpticalFlowRad', 'IntegratedX');
            
            obj.JavaMessage.setIntegratedX(integratedx);
        end
        
        function integratedy = get.IntegratedY(obj)
            %get.IntegratedY Get the value for property IntegratedY
            integratedy = single(obj.JavaMessage.getIntegratedY);
        end
        
        function set.IntegratedY(obj, integratedy)
            %set.IntegratedY Set the value for property IntegratedY
            validateattributes(integratedy, {'numeric'}, {'nonempty', 'scalar'}, 'OpticalFlowRad', 'IntegratedY');
            
            obj.JavaMessage.setIntegratedY(integratedy);
        end
        
        function integratedxgyro = get.IntegratedXgyro(obj)
            %get.IntegratedXgyro Get the value for property IntegratedXgyro
            integratedxgyro = single(obj.JavaMessage.getIntegratedXgyro);
        end
        
        function set.IntegratedXgyro(obj, integratedxgyro)
            %set.IntegratedXgyro Set the value for property IntegratedXgyro
            validateattributes(integratedxgyro, {'numeric'}, {'nonempty', 'scalar'}, 'OpticalFlowRad', 'IntegratedXgyro');
            
            obj.JavaMessage.setIntegratedXgyro(integratedxgyro);
        end
        
        function integratedygyro = get.IntegratedYgyro(obj)
            %get.IntegratedYgyro Get the value for property IntegratedYgyro
            integratedygyro = single(obj.JavaMessage.getIntegratedYgyro);
        end
        
        function set.IntegratedYgyro(obj, integratedygyro)
            %set.IntegratedYgyro Set the value for property IntegratedYgyro
            validateattributes(integratedygyro, {'numeric'}, {'nonempty', 'scalar'}, 'OpticalFlowRad', 'IntegratedYgyro');
            
            obj.JavaMessage.setIntegratedYgyro(integratedygyro);
        end
        
        function integratedzgyro = get.IntegratedZgyro(obj)
            %get.IntegratedZgyro Get the value for property IntegratedZgyro
            integratedzgyro = single(obj.JavaMessage.getIntegratedZgyro);
        end
        
        function set.IntegratedZgyro(obj, integratedzgyro)
            %set.IntegratedZgyro Set the value for property IntegratedZgyro
            validateattributes(integratedzgyro, {'numeric'}, {'nonempty', 'scalar'}, 'OpticalFlowRad', 'IntegratedZgyro');
            
            obj.JavaMessage.setIntegratedZgyro(integratedzgyro);
        end
        
        function temperature = get.Temperature(obj)
            %get.Temperature Get the value for property Temperature
            temperature = int16(obj.JavaMessage.getTemperature);
        end
        
        function set.Temperature(obj, temperature)
            %set.Temperature Set the value for property Temperature
            validateattributes(temperature, {'numeric'}, {'nonempty', 'scalar'}, 'OpticalFlowRad', 'Temperature');
            
            obj.JavaMessage.setTemperature(temperature);
        end
        
        function quality = get.Quality(obj)
            %get.Quality Get the value for property Quality
            quality = typecast(int8(obj.JavaMessage.getQuality), 'uint8');
        end
        
        function set.Quality(obj, quality)
            %set.Quality Set the value for property Quality
            validateattributes(quality, {'numeric'}, {'nonempty', 'scalar'}, 'OpticalFlowRad', 'Quality');
            
            obj.JavaMessage.setQuality(quality);
        end
        
        function timedeltadistanceus = get.TimeDeltaDistanceUs(obj)
            %get.TimeDeltaDistanceUs Get the value for property TimeDeltaDistanceUs
            timedeltadistanceus = typecast(int32(obj.JavaMessage.getTimeDeltaDistanceUs), 'uint32');
        end
        
        function set.TimeDeltaDistanceUs(obj, timedeltadistanceus)
            %set.TimeDeltaDistanceUs Set the value for property TimeDeltaDistanceUs
            validateattributes(timedeltadistanceus, {'numeric'}, {'nonempty', 'scalar'}, 'OpticalFlowRad', 'TimeDeltaDistanceUs');
            
            obj.JavaMessage.setTimeDeltaDistanceUs(timedeltadistanceus);
        end
        
        function distance = get.Distance(obj)
            %get.Distance Get the value for property Distance
            distance = single(obj.JavaMessage.getDistance);
        end
        
        function set.Distance(obj, distance)
            %set.Distance Set the value for property Distance
            validateattributes(distance, {'numeric'}, {'nonempty', 'scalar'}, 'OpticalFlowRad', 'Distance');
            
            obj.JavaMessage.setDistance(distance);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.IntegrationTimeUs = obj.IntegrationTimeUs;
            cpObj.IntegratedX = obj.IntegratedX;
            cpObj.IntegratedY = obj.IntegratedY;
            cpObj.IntegratedXgyro = obj.IntegratedXgyro;
            cpObj.IntegratedYgyro = obj.IntegratedYgyro;
            cpObj.IntegratedZgyro = obj.IntegratedZgyro;
            cpObj.Temperature = obj.Temperature;
            cpObj.Quality = obj.Quality;
            cpObj.TimeDeltaDistanceUs = obj.TimeDeltaDistanceUs;
            cpObj.Distance = obj.Distance;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.IntegrationTimeUs = strObj.IntegrationTimeUs;
            obj.IntegratedX = strObj.IntegratedX;
            obj.IntegratedY = strObj.IntegratedY;
            obj.IntegratedXgyro = strObj.IntegratedXgyro;
            obj.IntegratedYgyro = strObj.IntegratedYgyro;
            obj.IntegratedZgyro = strObj.IntegratedZgyro;
            obj.Temperature = strObj.Temperature;
            obj.Quality = strObj.Quality;
            obj.TimeDeltaDistanceUs = strObj.TimeDeltaDistanceUs;
            obj.Distance = strObj.Distance;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.IntegrationTimeUs = obj.IntegrationTimeUs;
            strObj.IntegratedX = obj.IntegratedX;
            strObj.IntegratedY = obj.IntegratedY;
            strObj.IntegratedXgyro = obj.IntegratedXgyro;
            strObj.IntegratedYgyro = obj.IntegratedYgyro;
            strObj.IntegratedZgyro = obj.IntegratedZgyro;
            strObj.Temperature = obj.Temperature;
            strObj.Quality = obj.Quality;
            strObj.TimeDeltaDistanceUs = obj.TimeDeltaDistanceUs;
            strObj.Distance = obj.Distance;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.OpticalFlowRad.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.OpticalFlowRad;
            obj.reload(strObj);
        end
    end
end
