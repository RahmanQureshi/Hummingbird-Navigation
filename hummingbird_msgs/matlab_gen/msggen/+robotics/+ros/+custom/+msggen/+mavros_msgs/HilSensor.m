classdef HilSensor < robotics.ros.Message
    %HilSensor MATLAB implementation of mavros_msgs/HilSensor
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/HilSensor' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '2a892891e5c40d6dd1066bf1f394b5dc' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Acc
        Gyro
        Mag
        AbsPressure
        DiffPressure
        PressureAlt
        Temperature
        FieldsUpdated
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Acc', [], 'Gyro', [], 'Mag', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AbsPressure', 'Acc', 'DiffPressure', 'FieldsUpdated', 'Gyro', 'Header', 'Mag', 'PressureAlt', 'Temperature'} % List of non-constant message properties
        ROSPropertyList = {'abs_pressure', 'acc', 'diff_pressure', 'fields_updated', 'gyro', 'header', 'mag', 'pressure_alt', 'temperature'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = HilSensor(msg)
            %HilSensor Construct the message object HilSensor
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'HilSensor', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function acc = get.Acc(obj)
            %get.Acc Get the value for property Acc
            if isempty(obj.Cache.Acc)
                obj.Cache.Acc = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getAcc);
            end
            acc = obj.Cache.Acc;
        end
        
        function set.Acc(obj, acc)
            %set.Acc Set the value for property Acc
            validateattributes(acc, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'HilSensor', 'Acc');
            
            obj.JavaMessage.setAcc(acc.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Acc)
                obj.Cache.Acc.setJavaObject(acc.getJavaObject);
            end
        end
        
        function gyro = get.Gyro(obj)
            %get.Gyro Get the value for property Gyro
            if isempty(obj.Cache.Gyro)
                obj.Cache.Gyro = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getGyro);
            end
            gyro = obj.Cache.Gyro;
        end
        
        function set.Gyro(obj, gyro)
            %set.Gyro Set the value for property Gyro
            validateattributes(gyro, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'HilSensor', 'Gyro');
            
            obj.JavaMessage.setGyro(gyro.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Gyro)
                obj.Cache.Gyro.setJavaObject(gyro.getJavaObject);
            end
        end
        
        function mag = get.Mag(obj)
            %get.Mag Get the value for property Mag
            if isempty(obj.Cache.Mag)
                obj.Cache.Mag = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getMag);
            end
            mag = obj.Cache.Mag;
        end
        
        function set.Mag(obj, mag)
            %set.Mag Set the value for property Mag
            validateattributes(mag, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'HilSensor', 'Mag');
            
            obj.JavaMessage.setMag(mag.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Mag)
                obj.Cache.Mag.setJavaObject(mag.getJavaObject);
            end
        end
        
        function abspressure = get.AbsPressure(obj)
            %get.AbsPressure Get the value for property AbsPressure
            abspressure = single(obj.JavaMessage.getAbsPressure);
        end
        
        function set.AbsPressure(obj, abspressure)
            %set.AbsPressure Set the value for property AbsPressure
            validateattributes(abspressure, {'numeric'}, {'nonempty', 'scalar'}, 'HilSensor', 'AbsPressure');
            
            obj.JavaMessage.setAbsPressure(abspressure);
        end
        
        function diffpressure = get.DiffPressure(obj)
            %get.DiffPressure Get the value for property DiffPressure
            diffpressure = single(obj.JavaMessage.getDiffPressure);
        end
        
        function set.DiffPressure(obj, diffpressure)
            %set.DiffPressure Set the value for property DiffPressure
            validateattributes(diffpressure, {'numeric'}, {'nonempty', 'scalar'}, 'HilSensor', 'DiffPressure');
            
            obj.JavaMessage.setDiffPressure(diffpressure);
        end
        
        function pressurealt = get.PressureAlt(obj)
            %get.PressureAlt Get the value for property PressureAlt
            pressurealt = single(obj.JavaMessage.getPressureAlt);
        end
        
        function set.PressureAlt(obj, pressurealt)
            %set.PressureAlt Set the value for property PressureAlt
            validateattributes(pressurealt, {'numeric'}, {'nonempty', 'scalar'}, 'HilSensor', 'PressureAlt');
            
            obj.JavaMessage.setPressureAlt(pressurealt);
        end
        
        function temperature = get.Temperature(obj)
            %get.Temperature Get the value for property Temperature
            temperature = single(obj.JavaMessage.getTemperature);
        end
        
        function set.Temperature(obj, temperature)
            %set.Temperature Set the value for property Temperature
            validateattributes(temperature, {'numeric'}, {'nonempty', 'scalar'}, 'HilSensor', 'Temperature');
            
            obj.JavaMessage.setTemperature(temperature);
        end
        
        function fieldsupdated = get.FieldsUpdated(obj)
            %get.FieldsUpdated Get the value for property FieldsUpdated
            fieldsupdated = typecast(int32(obj.JavaMessage.getFieldsUpdated), 'uint32');
        end
        
        function set.FieldsUpdated(obj, fieldsupdated)
            %set.FieldsUpdated Set the value for property FieldsUpdated
            validateattributes(fieldsupdated, {'numeric'}, {'nonempty', 'scalar'}, 'HilSensor', 'FieldsUpdated');
            
            obj.JavaMessage.setFieldsUpdated(fieldsupdated);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Acc = [];
            obj.Cache.Gyro = [];
            obj.Cache.Mag = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.AbsPressure = obj.AbsPressure;
            cpObj.DiffPressure = obj.DiffPressure;
            cpObj.PressureAlt = obj.PressureAlt;
            cpObj.Temperature = obj.Temperature;
            cpObj.FieldsUpdated = obj.FieldsUpdated;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Acc = copy(obj.Acc);
            cpObj.Gyro = copy(obj.Gyro);
            cpObj.Mag = copy(obj.Mag);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.AbsPressure = strObj.AbsPressure;
            obj.DiffPressure = strObj.DiffPressure;
            obj.PressureAlt = strObj.PressureAlt;
            obj.Temperature = strObj.Temperature;
            obj.FieldsUpdated = strObj.FieldsUpdated;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Acc = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.Acc);
            obj.Gyro = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.Gyro);
            obj.Mag = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.Mag);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.AbsPressure = obj.AbsPressure;
            strObj.DiffPressure = obj.DiffPressure;
            strObj.PressureAlt = obj.PressureAlt;
            strObj.Temperature = obj.Temperature;
            strObj.FieldsUpdated = obj.FieldsUpdated;
            strObj.Header = saveobj(obj.Header);
            strObj.Acc = saveobj(obj.Acc);
            strObj.Gyro = saveobj(obj.Gyro);
            strObj.Mag = saveobj(obj.Mag);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.HilSensor.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.HilSensor;
            obj.reload(strObj);
        end
    end
end
