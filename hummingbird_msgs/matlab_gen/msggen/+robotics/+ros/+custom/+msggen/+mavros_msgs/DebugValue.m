classdef DebugValue < robotics.ros.Message
    %DebugValue MATLAB implementation of mavros_msgs/DebugValue
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/DebugValue' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'af412ff7223c64155e7e3c6b7508eaaa' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        TYPEDEBUG = uint8(0)
        TYPEDEBUGVECT = uint8(1)
        TYPEDEBUGARRAY = uint8(2)
        TYPENAMEDVALUEFLOAT = uint8(3)
        TYPENAMEDVALUEINT = uint8(4)
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Index
        Name
        ValueFloat
        ValueInt
        Type
        Data
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Data', 'Header', 'Index', 'Name', 'Type', 'ValueFloat', 'ValueInt'} % List of non-constant message properties
        ROSPropertyList = {'data', 'header', 'index', 'name', 'type', 'value_float', 'value_int'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = DebugValue(msg)
            %DebugValue Construct the message object DebugValue
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'DebugValue', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function index = get.Index(obj)
            %get.Index Get the value for property Index
            index = int32(obj.JavaMessage.getIndex);
        end
        
        function set.Index(obj, index)
            %set.Index Set the value for property Index
            validateattributes(index, {'numeric'}, {'nonempty', 'scalar'}, 'DebugValue', 'Index');
            
            obj.JavaMessage.setIndex(index);
        end
        
        function name = get.Name(obj)
            %get.Name Get the value for property Name
            name = char(obj.JavaMessage.getName);
        end
        
        function set.Name(obj, name)
            %set.Name Set the value for property Name
            validateattributes(name, {'char'}, {}, 'DebugValue', 'Name');
            
            obj.JavaMessage.setName(name);
        end
        
        function valuefloat = get.ValueFloat(obj)
            %get.ValueFloat Get the value for property ValueFloat
            valuefloat = single(obj.JavaMessage.getValueFloat);
        end
        
        function set.ValueFloat(obj, valuefloat)
            %set.ValueFloat Set the value for property ValueFloat
            validateattributes(valuefloat, {'numeric'}, {'nonempty', 'scalar'}, 'DebugValue', 'ValueFloat');
            
            obj.JavaMessage.setValueFloat(valuefloat);
        end
        
        function valueint = get.ValueInt(obj)
            %get.ValueInt Get the value for property ValueInt
            valueint = int32(obj.JavaMessage.getValueInt);
        end
        
        function set.ValueInt(obj, valueint)
            %set.ValueInt Set the value for property ValueInt
            validateattributes(valueint, {'numeric'}, {'nonempty', 'scalar'}, 'DebugValue', 'ValueInt');
            
            obj.JavaMessage.setValueInt(valueint);
        end
        
        function type = get.Type(obj)
            %get.Type Get the value for property Type
            type = typecast(int8(obj.JavaMessage.getType), 'uint8');
        end
        
        function set.Type(obj, type)
            %set.Type Set the value for property Type
            validateattributes(type, {'numeric'}, {'nonempty', 'scalar'}, 'DebugValue', 'Type');
            
            obj.JavaMessage.setType(type);
        end
        
        function data = get.Data(obj)
            %get.Data Get the value for property Data
            javaArray = obj.JavaMessage.getData;
            array = obj.readJavaArray(javaArray, 'single');
            data = single(array);
        end
        
        function set.Data(obj, data)
            %set.Data Set the value for property Data
            if ~isvector(data) && isempty(data)
                % Allow empty [] input
                data = single.empty(0,1);
            end
            
            validateattributes(data, {'numeric'}, {'vector'}, 'DebugValue', 'Data');
            
            javaArray = obj.JavaMessage.getData;
            array = obj.writeJavaArray(data, javaArray, 'single');
            obj.JavaMessage.setData(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Index = obj.Index;
            cpObj.Name = obj.Name;
            cpObj.ValueFloat = obj.ValueFloat;
            cpObj.ValueInt = obj.ValueInt;
            cpObj.Type = obj.Type;
            cpObj.Data = obj.Data;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Index = strObj.Index;
            obj.Name = strObj.Name;
            obj.ValueFloat = strObj.ValueFloat;
            obj.ValueInt = strObj.ValueInt;
            obj.Type = strObj.Type;
            obj.Data = strObj.Data;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Index = obj.Index;
            strObj.Name = obj.Name;
            strObj.ValueFloat = obj.ValueFloat;
            strObj.ValueInt = obj.ValueInt;
            strObj.Type = obj.Type;
            strObj.Data = obj.Data;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.DebugValue.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.DebugValue;
            obj.reload(strObj);
        end
    end
end
