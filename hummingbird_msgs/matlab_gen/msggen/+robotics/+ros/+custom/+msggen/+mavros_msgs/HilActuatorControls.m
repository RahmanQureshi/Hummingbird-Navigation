classdef HilActuatorControls < robotics.ros.Message
    %HilActuatorControls MATLAB implementation of mavros_msgs/HilActuatorControls
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/HilActuatorControls' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '18482e8ef0330ac2fc9a0421be1d11c3' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Mode
        Flags
        Controls
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Controls', 'Flags', 'Header', 'Mode'} % List of non-constant message properties
        ROSPropertyList = {'controls', 'flags', 'header', 'mode'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = HilActuatorControls(msg)
            %HilActuatorControls Construct the message object HilActuatorControls
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'HilActuatorControls', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function mode = get.Mode(obj)
            %get.Mode Get the value for property Mode
            mode = typecast(int8(obj.JavaMessage.getMode), 'uint8');
        end
        
        function set.Mode(obj, mode)
            %set.Mode Set the value for property Mode
            validateattributes(mode, {'numeric'}, {'nonempty', 'scalar'}, 'HilActuatorControls', 'Mode');
            
            obj.JavaMessage.setMode(mode);
        end
        
        function flags = get.Flags(obj)
            %get.Flags Get the value for property Flags
            flags = typecast(int64(obj.JavaMessage.getFlags), 'uint64');
        end
        
        function set.Flags(obj, flags)
            %set.Flags Set the value for property Flags
            validateattributes(flags, {'numeric'}, {'nonempty', 'scalar'}, 'HilActuatorControls', 'Flags');
            
            obj.JavaMessage.setFlags(flags);
        end
        
        function controls = get.Controls(obj)
            %get.Controls Get the value for property Controls
            javaArray = obj.JavaMessage.getControls;
            array = obj.readJavaArray(javaArray, 'single');
            controls = single(array);
        end
        
        function set.Controls(obj, controls)
            %set.Controls Set the value for property Controls
            validateattributes(controls, {'numeric'}, {'vector', 'numel', 16}, 'HilActuatorControls', 'Controls');
            
            javaArray = obj.JavaMessage.getControls;
            array = obj.writeJavaArray(controls, javaArray, 'single');
            obj.JavaMessage.setControls(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Mode = obj.Mode;
            cpObj.Flags = obj.Flags;
            cpObj.Controls = obj.Controls;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Mode = strObj.Mode;
            obj.Flags = strObj.Flags;
            obj.Controls = strObj.Controls;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Mode = obj.Mode;
            strObj.Flags = obj.Flags;
            strObj.Controls = obj.Controls;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.HilActuatorControls.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.HilActuatorControls;
            obj.reload(strObj);
        end
    end
end
