classdef Altitude < robotics.ros.Message
    %Altitude MATLAB implementation of mavros_msgs/Altitude
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/Altitude' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '1296a05dc5b6160be0ae04ba9ed3a3fa' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Monotonic
        Amsl
        Local
        Relative
        Terrain
        BottomClearance
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Amsl', 'BottomClearance', 'Header', 'Local', 'Monotonic', 'Relative', 'Terrain'} % List of non-constant message properties
        ROSPropertyList = {'amsl', 'bottom_clearance', 'header', 'local', 'monotonic', 'relative', 'terrain'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Altitude(msg)
            %Altitude Construct the message object Altitude
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Altitude', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function monotonic = get.Monotonic(obj)
            %get.Monotonic Get the value for property Monotonic
            monotonic = single(obj.JavaMessage.getMonotonic);
        end
        
        function set.Monotonic(obj, monotonic)
            %set.Monotonic Set the value for property Monotonic
            validateattributes(monotonic, {'numeric'}, {'nonempty', 'scalar'}, 'Altitude', 'Monotonic');
            
            obj.JavaMessage.setMonotonic(monotonic);
        end
        
        function amsl = get.Amsl(obj)
            %get.Amsl Get the value for property Amsl
            amsl = single(obj.JavaMessage.getAmsl);
        end
        
        function set.Amsl(obj, amsl)
            %set.Amsl Set the value for property Amsl
            validateattributes(amsl, {'numeric'}, {'nonempty', 'scalar'}, 'Altitude', 'Amsl');
            
            obj.JavaMessage.setAmsl(amsl);
        end
        
        function local = get.Local(obj)
            %get.Local Get the value for property Local
            local = single(obj.JavaMessage.getLocal);
        end
        
        function set.Local(obj, local)
            %set.Local Set the value for property Local
            validateattributes(local, {'numeric'}, {'nonempty', 'scalar'}, 'Altitude', 'Local');
            
            obj.JavaMessage.setLocal(local);
        end
        
        function relative = get.Relative(obj)
            %get.Relative Get the value for property Relative
            relative = single(obj.JavaMessage.getRelative);
        end
        
        function set.Relative(obj, relative)
            %set.Relative Set the value for property Relative
            validateattributes(relative, {'numeric'}, {'nonempty', 'scalar'}, 'Altitude', 'Relative');
            
            obj.JavaMessage.setRelative(relative);
        end
        
        function terrain = get.Terrain(obj)
            %get.Terrain Get the value for property Terrain
            terrain = single(obj.JavaMessage.getTerrain);
        end
        
        function set.Terrain(obj, terrain)
            %set.Terrain Set the value for property Terrain
            validateattributes(terrain, {'numeric'}, {'nonempty', 'scalar'}, 'Altitude', 'Terrain');
            
            obj.JavaMessage.setTerrain(terrain);
        end
        
        function bottomclearance = get.BottomClearance(obj)
            %get.BottomClearance Get the value for property BottomClearance
            bottomclearance = single(obj.JavaMessage.getBottomClearance);
        end
        
        function set.BottomClearance(obj, bottomclearance)
            %set.BottomClearance Set the value for property BottomClearance
            validateattributes(bottomclearance, {'numeric'}, {'nonempty', 'scalar'}, 'Altitude', 'BottomClearance');
            
            obj.JavaMessage.setBottomClearance(bottomclearance);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Monotonic = obj.Monotonic;
            cpObj.Amsl = obj.Amsl;
            cpObj.Local = obj.Local;
            cpObj.Relative = obj.Relative;
            cpObj.Terrain = obj.Terrain;
            cpObj.BottomClearance = obj.BottomClearance;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Monotonic = strObj.Monotonic;
            obj.Amsl = strObj.Amsl;
            obj.Local = strObj.Local;
            obj.Relative = strObj.Relative;
            obj.Terrain = strObj.Terrain;
            obj.BottomClearance = strObj.BottomClearance;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Monotonic = obj.Monotonic;
            strObj.Amsl = obj.Amsl;
            strObj.Local = obj.Local;
            strObj.Relative = obj.Relative;
            strObj.Terrain = obj.Terrain;
            strObj.BottomClearance = obj.BottomClearance;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.Altitude.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.Altitude;
            obj.reload(strObj);
        end
    end
end
