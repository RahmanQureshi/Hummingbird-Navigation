classdef CommandIntRequest < robotics.ros.Message
    %CommandIntRequest MATLAB implementation of mavros_msgs/CommandIntRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mavros_msgs/CommandIntRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '6165959012c47e0f665b640c1ab12391' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Broadcast
        Frame
        Command
        Current
        Autocontinue
        Param1
        Param2
        Param3
        Param4
        X
        Y
        Z
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Autocontinue', 'Broadcast', 'Command', 'Current', 'Frame', 'Param1', 'Param2', 'Param3', 'Param4', 'X', 'Y', 'Z'} % List of non-constant message properties
        ROSPropertyList = {'autocontinue', 'broadcast', 'command', 'current', 'frame', 'param1', 'param2', 'param3', 'param4', 'x', 'y', 'z'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = CommandIntRequest(msg)
            %CommandIntRequest Construct the message object CommandIntRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function broadcast = get.Broadcast(obj)
            %get.Broadcast Get the value for property Broadcast
            broadcast = logical(obj.JavaMessage.getBroadcast);
        end
        
        function set.Broadcast(obj, broadcast)
            %set.Broadcast Set the value for property Broadcast
            validateattributes(broadcast, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'CommandIntRequest', 'Broadcast');
            
            obj.JavaMessage.setBroadcast(broadcast);
        end
        
        function frame = get.Frame(obj)
            %get.Frame Get the value for property Frame
            frame = typecast(int8(obj.JavaMessage.getFrame), 'uint8');
        end
        
        function set.Frame(obj, frame)
            %set.Frame Set the value for property Frame
            validateattributes(frame, {'numeric'}, {'nonempty', 'scalar'}, 'CommandIntRequest', 'Frame');
            
            obj.JavaMessage.setFrame(frame);
        end
        
        function command = get.Command(obj)
            %get.Command Get the value for property Command
            command = typecast(int16(obj.JavaMessage.getCommand), 'uint16');
        end
        
        function set.Command(obj, command)
            %set.Command Set the value for property Command
            validateattributes(command, {'numeric'}, {'nonempty', 'scalar'}, 'CommandIntRequest', 'Command');
            
            obj.JavaMessage.setCommand(command);
        end
        
        function current = get.Current(obj)
            %get.Current Get the value for property Current
            current = typecast(int8(obj.JavaMessage.getCurrent), 'uint8');
        end
        
        function set.Current(obj, current)
            %set.Current Set the value for property Current
            validateattributes(current, {'numeric'}, {'nonempty', 'scalar'}, 'CommandIntRequest', 'Current');
            
            obj.JavaMessage.setCurrent(current);
        end
        
        function autocontinue = get.Autocontinue(obj)
            %get.Autocontinue Get the value for property Autocontinue
            autocontinue = typecast(int8(obj.JavaMessage.getAutocontinue), 'uint8');
        end
        
        function set.Autocontinue(obj, autocontinue)
            %set.Autocontinue Set the value for property Autocontinue
            validateattributes(autocontinue, {'numeric'}, {'nonempty', 'scalar'}, 'CommandIntRequest', 'Autocontinue');
            
            obj.JavaMessage.setAutocontinue(autocontinue);
        end
        
        function param1 = get.Param1(obj)
            %get.Param1 Get the value for property Param1
            param1 = single(obj.JavaMessage.getParam1);
        end
        
        function set.Param1(obj, param1)
            %set.Param1 Set the value for property Param1
            validateattributes(param1, {'numeric'}, {'nonempty', 'scalar'}, 'CommandIntRequest', 'Param1');
            
            obj.JavaMessage.setParam1(param1);
        end
        
        function param2 = get.Param2(obj)
            %get.Param2 Get the value for property Param2
            param2 = single(obj.JavaMessage.getParam2);
        end
        
        function set.Param2(obj, param2)
            %set.Param2 Set the value for property Param2
            validateattributes(param2, {'numeric'}, {'nonempty', 'scalar'}, 'CommandIntRequest', 'Param2');
            
            obj.JavaMessage.setParam2(param2);
        end
        
        function param3 = get.Param3(obj)
            %get.Param3 Get the value for property Param3
            param3 = single(obj.JavaMessage.getParam3);
        end
        
        function set.Param3(obj, param3)
            %set.Param3 Set the value for property Param3
            validateattributes(param3, {'numeric'}, {'nonempty', 'scalar'}, 'CommandIntRequest', 'Param3');
            
            obj.JavaMessage.setParam3(param3);
        end
        
        function param4 = get.Param4(obj)
            %get.Param4 Get the value for property Param4
            param4 = single(obj.JavaMessage.getParam4);
        end
        
        function set.Param4(obj, param4)
            %set.Param4 Set the value for property Param4
            validateattributes(param4, {'numeric'}, {'nonempty', 'scalar'}, 'CommandIntRequest', 'Param4');
            
            obj.JavaMessage.setParam4(param4);
        end
        
        function x = get.X(obj)
            %get.X Get the value for property X
            x = int32(obj.JavaMessage.getX);
        end
        
        function set.X(obj, x)
            %set.X Set the value for property X
            validateattributes(x, {'numeric'}, {'nonempty', 'scalar'}, 'CommandIntRequest', 'X');
            
            obj.JavaMessage.setX(x);
        end
        
        function y = get.Y(obj)
            %get.Y Get the value for property Y
            y = int32(obj.JavaMessage.getY);
        end
        
        function set.Y(obj, y)
            %set.Y Set the value for property Y
            validateattributes(y, {'numeric'}, {'nonempty', 'scalar'}, 'CommandIntRequest', 'Y');
            
            obj.JavaMessage.setY(y);
        end
        
        function z = get.Z(obj)
            %get.Z Get the value for property Z
            z = single(obj.JavaMessage.getZ);
        end
        
        function set.Z(obj, z)
            %set.Z Set the value for property Z
            validateattributes(z, {'numeric'}, {'nonempty', 'scalar'}, 'CommandIntRequest', 'Z');
            
            obj.JavaMessage.setZ(z);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Broadcast = obj.Broadcast;
            cpObj.Frame = obj.Frame;
            cpObj.Command = obj.Command;
            cpObj.Current = obj.Current;
            cpObj.Autocontinue = obj.Autocontinue;
            cpObj.Param1 = obj.Param1;
            cpObj.Param2 = obj.Param2;
            cpObj.Param3 = obj.Param3;
            cpObj.Param4 = obj.Param4;
            cpObj.X = obj.X;
            cpObj.Y = obj.Y;
            cpObj.Z = obj.Z;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Broadcast = strObj.Broadcast;
            obj.Frame = strObj.Frame;
            obj.Command = strObj.Command;
            obj.Current = strObj.Current;
            obj.Autocontinue = strObj.Autocontinue;
            obj.Param1 = strObj.Param1;
            obj.Param2 = strObj.Param2;
            obj.Param3 = strObj.Param3;
            obj.Param4 = strObj.Param4;
            obj.X = strObj.X;
            obj.Y = strObj.Y;
            obj.Z = strObj.Z;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Broadcast = obj.Broadcast;
            strObj.Frame = obj.Frame;
            strObj.Command = obj.Command;
            strObj.Current = obj.Current;
            strObj.Autocontinue = obj.Autocontinue;
            strObj.Param1 = obj.Param1;
            strObj.Param2 = obj.Param2;
            strObj.Param3 = obj.Param3;
            strObj.Param4 = obj.Param4;
            strObj.X = obj.X;
            strObj.Y = obj.Y;
            strObj.Z = obj.Z;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mavros_msgs.CommandIntRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mavros_msgs.CommandIntRequest;
            obj.reload(strObj);
        end
    end
end
